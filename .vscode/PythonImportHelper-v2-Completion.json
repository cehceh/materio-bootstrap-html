[
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateLayout",
        "importPath": "web_project",
        "description": "web_project",
        "isExtraImport": true,
        "detail": "web_project",
        "documentation": {}
    },
    {
        "label": "TemplateHelper",
        "importPath": "web_project.template_helpers.theme",
        "description": "web_project.template_helpers.theme",
        "isExtraImport": true,
        "detail": "web_project.template_helpers.theme",
        "documentation": {}
    },
    {
        "label": "TemplateHelper",
        "importPath": "web_project.template_helpers.theme",
        "description": "web_project.template_helpers.theme",
        "isExtraImport": true,
        "detail": "web_project.template_helpers.theme",
        "documentation": {}
    },
    {
        "label": "TemplateHelper",
        "importPath": "web_project.template_helpers.theme",
        "description": "web_project.template_helpers.theme",
        "isExtraImport": true,
        "detail": "web_project.template_helpers.theme",
        "documentation": {}
    },
    {
        "label": "TemplateHelper",
        "importPath": "web_project.template_helpers.theme",
        "description": "web_project.template_helpers.theme",
        "isExtraImport": true,
        "detail": "web_project.template_helpers.theme",
        "documentation": {}
    },
    {
        "label": "TemplateHelper",
        "importPath": "web_project.template_helpers.theme",
        "description": "web_project.template_helpers.theme",
        "isExtraImport": true,
        "detail": "web_project.template_helpers.theme",
        "documentation": {}
    },
    {
        "label": "TemplateHelper",
        "importPath": "web_project.template_helpers.theme",
        "description": "web_project.template_helpers.theme",
        "isExtraImport": true,
        "detail": "web_project.template_helpers.theme",
        "documentation": {}
    },
    {
        "label": "TemplateHelper",
        "importPath": "web_project.template_helpers.theme",
        "description": "web_project.template_helpers.theme",
        "isExtraImport": true,
        "detail": "web_project.template_helpers.theme",
        "documentation": {}
    },
    {
        "label": "TemplateHelper",
        "importPath": "web_project.template_helpers.theme",
        "description": "web_project.template_helpers.theme",
        "isExtraImport": true,
        "detail": "web_project.template_helpers.theme",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "choices",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "choices",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "choices",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "DailyTaskUOM",
        "importPath": "apps.configurations.models.daily_task_model",
        "description": "apps.configurations.models.daily_task_model",
        "isExtraImport": true,
        "detail": "apps.configurations.models.daily_task_model",
        "documentation": {}
    },
    {
        "label": "DailyTaskUnitPurchase",
        "importPath": "apps.configurations.models.daily_task_model",
        "description": "apps.configurations.models.daily_task_model",
        "isExtraImport": true,
        "detail": "apps.configurations.models.daily_task_model",
        "documentation": {}
    },
    {
        "label": "DailyTaskUnitSale",
        "importPath": "apps.configurations.models.daily_task_model",
        "description": "apps.configurations.models.daily_task_model",
        "isExtraImport": true,
        "detail": "apps.configurations.models.daily_task_model",
        "documentation": {}
    },
    {
        "label": "UnitNames",
        "importPath": "apps.configurations.models.conf_models",
        "description": "apps.configurations.models.conf_models",
        "isExtraImport": true,
        "detail": "apps.configurations.models.conf_models",
        "documentation": {}
    },
    {
        "label": "pass_query",
        "importPath": "config.utils",
        "description": "config.utils",
        "isExtraImport": true,
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "model_id_restriction",
        "importPath": "config.utils",
        "description": "config.utils",
        "isExtraImport": true,
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "model_id_restriction",
        "importPath": "config.utils",
        "description": "config.utils",
        "isExtraImport": true,
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "django.db.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models",
        "description": "django.db.models",
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "CURRENT_STATUS",
        "importPath": "config.choices",
        "description": "config.choices",
        "isExtraImport": true,
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CURRENT_STATUS",
        "importPath": "config.choices",
        "description": "config.choices",
        "isExtraImport": true,
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "name",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "OverwriteStorage",
        "importPath": "posapp.storage",
        "description": "posapp.storage",
        "isExtraImport": true,
        "detail": "posapp.storage",
        "documentation": {}
    },
    {
        "label": "choices",
        "importPath": "posapp",
        "description": "posapp",
        "isExtraImport": true,
        "detail": "posapp",
        "documentation": {}
    },
    {
        "label": "choices",
        "importPath": "posapp",
        "description": "posapp",
        "isExtraImport": true,
        "detail": "posapp",
        "documentation": {}
    },
    {
        "label": "BasicData",
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "isExtraImport": true,
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "deconstructible",
        "importPath": "django.utils.deconstruct",
        "description": "django.utils.deconstruct",
        "isExtraImport": true,
        "detail": "django.utils.deconstruct",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "model_id_restriction",
        "importPath": "posapp.utils",
        "description": "posapp.utils",
        "isExtraImport": true,
        "detail": "posapp.utils",
        "documentation": {}
    },
    {
        "label": "model_id_restriction",
        "importPath": "posapp.utils",
        "description": "posapp.utils",
        "isExtraImport": true,
        "detail": "posapp.utils",
        "documentation": {}
    },
    {
        "label": "model_id_restriction",
        "importPath": "posapp.utils",
        "description": "posapp.utils",
        "isExtraImport": true,
        "detail": "posapp.utils",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Patients",
        "importPath": "apps.patientdata.models",
        "description": "apps.patientdata.models",
        "isExtraImport": true,
        "detail": "apps.patientdata.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "Visits",
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "isExtraImport": true,
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "PastHistory",
        "importPath": "apps.pasthistory.models",
        "description": "apps.pasthistory.models",
        "isExtraImport": true,
        "detail": "apps.pasthistory.models",
        "documentation": {}
    },
    {
        "label": "PastHistory",
        "importPath": "apps.pasthistory.models",
        "description": "apps.pasthistory.models",
        "isExtraImport": true,
        "detail": "apps.pasthistory.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "barcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "barcode",
        "description": "barcode",
        "detail": "barcode",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "BasicData",
        "importPath": "apps.configurations.models",
        "description": "apps.configurations.models",
        "isExtraImport": true,
        "detail": "apps.configurations.models",
        "documentation": {}
    },
    {
        "label": "ClientUsers",
        "importPath": "apps.configurations.models",
        "description": "apps.configurations.models",
        "isExtraImport": true,
        "detail": "apps.configurations.models",
        "documentation": {}
    },
    {
        "label": "Departments",
        "importPath": "apps.configurations.models",
        "description": "apps.configurations.models",
        "isExtraImport": true,
        "detail": "apps.configurations.models",
        "documentation": {}
    },
    {
        "label": "Branches",
        "importPath": "apps.configurations.models",
        "description": "apps.configurations.models",
        "isExtraImport": true,
        "detail": "apps.configurations.models",
        "documentation": {}
    },
    {
        "label": "Branches",
        "importPath": "apps.configurations.models",
        "description": "apps.configurations.models",
        "isExtraImport": true,
        "detail": "apps.configurations.models",
        "documentation": {}
    },
    {
        "label": "PosStation",
        "importPath": "apps.configurations.models",
        "description": "apps.configurations.models",
        "isExtraImport": true,
        "detail": "apps.configurations.models",
        "documentation": {}
    },
    {
        "label": "UnitNames",
        "importPath": "apps.configurations.models",
        "description": "apps.configurations.models",
        "isExtraImport": true,
        "detail": "apps.configurations.models",
        "documentation": {}
    },
    {
        "label": "PresentHistory",
        "importPath": "apps.presenthistory.models",
        "description": "apps.presenthistory.models",
        "isExtraImport": true,
        "detail": "apps.presenthistory.models",
        "documentation": {}
    },
    {
        "label": "PresentHistory",
        "importPath": "apps.presenthistory.models",
        "description": "apps.presenthistory.models",
        "isExtraImport": true,
        "detail": "apps.presenthistory.models",
        "documentation": {}
    },
    {
        "label": "PresentHistory",
        "importPath": "apps.presenthistory.models",
        "description": "apps.presenthistory.models",
        "isExtraImport": true,
        "detail": "apps.presenthistory.models",
        "documentation": {}
    },
    {
        "label": "PresentHistory",
        "importPath": "apps.presenthistory.models",
        "description": "apps.presenthistory.models",
        "isExtraImport": true,
        "detail": "apps.presenthistory.models",
        "documentation": {}
    },
    {
        "label": "Medicine",
        "importPath": "apps.visitdrug.models",
        "description": "apps.visitdrug.models",
        "isExtraImport": true,
        "detail": "apps.visitdrug.models",
        "documentation": {}
    },
    {
        "label": "Medicine",
        "importPath": "apps.visitdrug.models",
        "description": "apps.visitdrug.models",
        "isExtraImport": true,
        "detail": "apps.visitdrug.models",
        "documentation": {}
    },
    {
        "label": "Medicine",
        "importPath": "apps.visitdrug.models",
        "description": "apps.visitdrug.models",
        "isExtraImport": true,
        "detail": "apps.visitdrug.models",
        "documentation": {}
    },
    {
        "label": "Medicine",
        "importPath": "apps.visitdrug.models",
        "description": "apps.visitdrug.models",
        "isExtraImport": true,
        "detail": "apps.visitdrug.models",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_uppercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "digits",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_uppercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "digits",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_uppercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "digits",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_uppercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "digits",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Revisits",
        "importPath": "apps.revisits.models",
        "description": "apps.revisits.models",
        "isExtraImport": true,
        "detail": "apps.revisits.models",
        "documentation": {}
    },
    {
        "label": "Revisits",
        "importPath": "apps.revisits.models",
        "description": "apps.revisits.models",
        "isExtraImport": true,
        "detail": "apps.revisits.models",
        "documentation": {}
    },
    {
        "label": "django_tables2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_tables2",
        "description": "django_tables2",
        "detail": "django_tables2",
        "documentation": {}
    },
    {
        "label": "Remedicine",
        "importPath": "apps.revisitdrug.models",
        "description": "apps.revisitdrug.models",
        "isExtraImport": true,
        "detail": "apps.revisitdrug.models",
        "documentation": {}
    },
    {
        "label": "PatientsTable",
        "importPath": "apps.patientdata.tables",
        "description": "apps.patientdata.tables",
        "isExtraImport": true,
        "detail": "apps.patientdata.tables",
        "documentation": {}
    },
    {
        "label": "PatientsTable",
        "importPath": "apps.patientdata.tables",
        "description": "apps.patientdata.tables",
        "isExtraImport": true,
        "detail": "apps.patientdata.tables",
        "documentation": {}
    },
    {
        "label": "VisitsTable",
        "importPath": "apps.visits.tables",
        "description": "apps.visits.tables",
        "isExtraImport": true,
        "detail": "apps.visits.tables",
        "documentation": {}
    },
    {
        "label": "VisitsTable",
        "importPath": "apps.visits.tables",
        "description": "apps.visits.tables",
        "isExtraImport": true,
        "detail": "apps.visits.tables",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "DefaultAccountAdapter",
        "importPath": "allauth.account.adapter",
        "description": "allauth.account.adapter",
        "isExtraImport": true,
        "detail": "allauth.account.adapter",
        "documentation": {}
    },
    {
        "label": "SignupView",
        "importPath": "allauth.account.views",
        "description": "allauth.account.views",
        "isExtraImport": true,
        "detail": "allauth.account.views",
        "documentation": {}
    },
    {
        "label": "AuthenticationBackend",
        "importPath": "allauth.account.auth_backends",
        "description": "allauth.account.auth_backends",
        "isExtraImport": true,
        "detail": "allauth.account.auth_backends",
        "documentation": {}
    },
    {
        "label": "AdminProfile",
        "importPath": "apps.accounts.models",
        "description": "apps.accounts.models",
        "isExtraImport": true,
        "detail": "apps.accounts.models",
        "documentation": {}
    },
    {
        "label": "EmployeeProfile",
        "importPath": "apps.accounts.models",
        "description": "apps.accounts.models",
        "isExtraImport": true,
        "detail": "apps.accounts.models",
        "documentation": {}
    },
    {
        "label": "VendorProfile",
        "importPath": "apps.accounts.models",
        "description": "apps.accounts.models",
        "isExtraImport": true,
        "detail": "apps.accounts.models",
        "documentation": {}
    },
    {
        "label": "CustomerProfile",
        "importPath": "apps.accounts.models",
        "description": "apps.accounts.models",
        "isExtraImport": true,
        "detail": "apps.accounts.models",
        "documentation": {}
    },
    {
        "label": "AdminProfile",
        "importPath": "apps.accounts.models",
        "description": "apps.accounts.models",
        "isExtraImport": true,
        "detail": "apps.accounts.models",
        "documentation": {}
    },
    {
        "label": "EmployeeProfile",
        "importPath": "apps.accounts.models",
        "description": "apps.accounts.models",
        "isExtraImport": true,
        "detail": "apps.accounts.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "apps.employees.models",
        "description": "apps.employees.models",
        "isExtraImport": true,
        "detail": "apps.employees.models",
        "documentation": {}
    },
    {
        "label": "Vendor",
        "importPath": "apps.vendors.models",
        "description": "apps.vendors.models",
        "isExtraImport": true,
        "detail": "apps.vendors.models",
        "documentation": {}
    },
    {
        "label": "Vendor",
        "importPath": "apps.vendors.models",
        "description": "apps.vendors.models",
        "isExtraImport": true,
        "detail": "apps.vendors.models",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "importPath": "apps.users.models",
        "description": "apps.users.models",
        "isExtraImport": true,
        "detail": "apps.users.models",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.core.checks",
        "description": "django.core.checks",
        "isExtraImport": true,
        "detail": "django.core.checks",
        "documentation": {}
    },
    {
        "label": "AdminProfileForm",
        "importPath": "apps.accounts.forms",
        "description": "apps.accounts.forms",
        "isExtraImport": true,
        "detail": "apps.accounts.forms",
        "documentation": {}
    },
    {
        "label": "EmployeeProfileForm",
        "importPath": "apps.accounts.forms",
        "description": "apps.accounts.forms",
        "isExtraImport": true,
        "detail": "apps.accounts.forms",
        "documentation": {}
    },
    {
        "label": "generic",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_pdf",
        "importPath": "clinic.utils",
        "description": "clinic.utils",
        "isExtraImport": true,
        "detail": "clinic.utils",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "PatientsForm",
        "importPath": "apps.patientdata.forms",
        "description": "apps.patientdata.forms",
        "isExtraImport": true,
        "detail": "apps.patientdata.forms",
        "documentation": {}
    },
    {
        "label": "VisitsForm",
        "importPath": "apps.visits.forms",
        "description": "apps.visits.forms",
        "isExtraImport": true,
        "detail": "apps.visits.forms",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "ParentCategory",
        "importPath": "apps.categories.models",
        "description": "apps.categories.models",
        "isExtraImport": true,
        "detail": "apps.categories.models",
        "documentation": {}
    },
    {
        "label": "NewCategory",
        "importPath": "apps.categories.models",
        "description": "apps.categories.models",
        "isExtraImport": true,
        "detail": "apps.categories.models",
        "documentation": {}
    },
    {
        "label": "MainCategory",
        "importPath": "apps.categories.models",
        "description": "apps.categories.models",
        "isExtraImport": true,
        "detail": "apps.categories.models",
        "documentation": {}
    },
    {
        "label": "SubCategory",
        "importPath": "apps.categories.models",
        "description": "apps.categories.models",
        "isExtraImport": true,
        "detail": "apps.categories.models",
        "documentation": {}
    },
    {
        "label": "Stores",
        "importPath": "apps.stores.models",
        "description": "apps.stores.models",
        "isExtraImport": true,
        "detail": "apps.stores.models",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "DoctorNames",
        "importPath": "apps.configurations.models.doctors_models",
        "description": "apps.configurations.models.doctors_models",
        "isExtraImport": true,
        "detail": "apps.configurations.models.doctors_models",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "SystemView",
        "importPath": "web_project.views",
        "description": "web_project.views",
        "isExtraImport": true,
        "detail": "web_project.views",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "util",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AuthenticationConfig",
        "kind": 6,
        "importPath": "apps.authentication.apps",
        "description": "apps.authentication.apps",
        "peekOfCode": "class AuthenticationConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.authentication\"",
        "detail": "apps.authentication.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.authentication.urls",
        "description": "apps.authentication.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"auth/login/\",\n        AuthView.as_view(template_name=\"auth_login_basic.html\"),\n        name=\"auth-login-basic\",\n    ),\n    path(\n        \"auth/register/\",\n        AuthView.as_view(template_name=\"auth_register_basic.html\"),\n        name=\"auth-register-basic\",",
        "detail": "apps.authentication.urls",
        "documentation": {}
    },
    {
        "label": "AuthView",
        "kind": 6,
        "importPath": "apps.authentication.views",
        "description": "apps.authentication.views",
        "peekOfCode": "class AuthView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        # Update the context\n        context.update(\n            {\n                \"layout_path\": TemplateHelper.set_layout(\"layout_blank.html\", context),\n            }",
        "detail": "apps.authentication.views",
        "documentation": {}
    },
    {
        "label": "CardsConfig",
        "kind": 6,
        "importPath": "apps.cards.apps",
        "description": "apps.cards.apps",
        "peekOfCode": "class CardsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.cards\"",
        "detail": "apps.cards.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.cards.urls",
        "description": "apps.cards.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"cards/basic/\",\n      CardView.as_view(template_name=\"cards_basic.html\"),\n        name=\"cards-basic\",\n    )\n]",
        "detail": "apps.cards.urls",
        "documentation": {}
    },
    {
        "label": "CardView",
        "kind": 6,
        "importPath": "apps.cards.views",
        "description": "apps.cards.views",
        "peekOfCode": "class CardView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        return context",
        "detail": "apps.cards.views",
        "documentation": {}
    },
    {
        "label": "ClientUsersForm",
        "kind": 6,
        "importPath": "apps.configurations.forms.conf_forms",
        "description": "apps.configurations.forms.conf_forms",
        "peekOfCode": "class ClientUsersForm(forms.ModelForm):\n    class Meta:\n        model = ClientUsers\n        fields = [\n            \"name\",\n            \"mobile\",\n            \"balance\",\n        ]\n    # init function is importanat in saving user automatically in create() function\n    def clean(self):",
        "detail": "apps.configurations.forms.conf_forms",
        "documentation": {}
    },
    {
        "label": "UnitNamesForm",
        "kind": 6,
        "importPath": "apps.configurations.forms.conf_forms",
        "description": "apps.configurations.forms.conf_forms",
        "peekOfCode": "class UnitNamesForm(forms.ModelForm):\n    class Meta:\n        model = UnitNames\n        fields = [\n            \"name\",\n            \"code\",\n            \"active\",\n            \"is_deleted\",\n        ]\n    # init function is important in saving user automatically in create() function",
        "detail": "apps.configurations.forms.conf_forms",
        "documentation": {}
    },
    {
        "label": "BranchForm",
        "kind": 6,
        "importPath": "apps.configurations.forms.conf_forms",
        "description": "apps.configurations.forms.conf_forms",
        "peekOfCode": "class BranchForm(forms.ModelForm):\n    class Meta:\n        model = Branches\n        fields = [\n            \"name\",\n            \"description\",\n            \"code\",\n            \"active\",\n            \"is_deleted\",\n        ]",
        "detail": "apps.configurations.forms.conf_forms",
        "documentation": {}
    },
    {
        "label": "DepartmentsForm",
        "kind": 6,
        "importPath": "apps.configurations.forms.conf_forms",
        "description": "apps.configurations.forms.conf_forms",
        "peekOfCode": "class DepartmentsForm(forms.ModelForm):\n    class Meta:\n        model = Departments\n        fields = [\n            \"code\",\n            \"name\",\n            \"active\",\n            \"is_deleted\",\n            # \"updated_user\"\n        ]",
        "detail": "apps.configurations.forms.conf_forms",
        "documentation": {}
    },
    {
        "label": "DoctorNamesForm",
        "kind": 6,
        "importPath": "apps.configurations.forms.doctors_forms",
        "description": "apps.configurations.forms.doctors_forms",
        "peekOfCode": "class DoctorNamesForm(forms.ModelForm):\n    class Meta:\n        model = DoctorNames\n        fields = [\n            \"name\",\n            \"description\",\n            \"code\",\n            \"active\",\n            \"is_deleted\",\n        ]",
        "detail": "apps.configurations.forms.doctors_forms",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.configurations.migrations.0001_initial",
        "description": "apps.configurations.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bank',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "apps.configurations.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ClinicName",
        "kind": 6,
        "importPath": "apps.configurations.models.clinics_models",
        "description": "apps.configurations.models.clinics_models",
        "peekOfCode": "class ClinicName(BasicData):\n    name = models.CharField(max_length=100, unique=True, verbose_name=\"Clinic Name\")\n    doctor_specialization = models.OneToOneField(\n        DoctorSpecializations,\n        related_name=\"doctor_specializations_clinic\",\n        on_delete=models.CASCADE,\n    )\n    code = models.CharField(\n        max_length=30,\n        blank=True,",
        "detail": "apps.configurations.models.clinics_models",
        "documentation": {}
    },
    {
        "label": "CreateClinic",
        "kind": 6,
        "importPath": "apps.configurations.models.clinics_models",
        "description": "apps.configurations.models.clinics_models",
        "peekOfCode": "class CreateClinic(BasicData):\n    name = models.ForeignKey(\n        ClinicName,\n        related_name=\"create_clinic_name\",\n        on_delete=models.CASCADE,\n        verbose_name=\"Clinic Name\",\n    )\n    # doctor = models.ForeignKey(\n    #     DoctorSpecializations,\n    #     related_name='doctor_create_clinic',",
        "detail": "apps.configurations.models.clinics_models",
        "documentation": {}
    },
    {
        "label": "BasicData",
        "kind": 6,
        "importPath": "apps.configurations.models.conf_models",
        "description": "apps.configurations.models.conf_models",
        "peekOfCode": "class BasicData(models.Model):\n    user = models.ForeignKey(\n        \"users.CustomUser\",\n        default=\"\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        # related_name=\"user_create_object\",\n    )\n    active = models.BooleanField(default=False, verbose_name=_(\"Active\"))",
        "detail": "apps.configurations.models.conf_models",
        "documentation": {}
    },
    {
        "label": "ClientUsers",
        "kind": 6,
        "importPath": "apps.configurations.models.conf_models",
        "description": "apps.configurations.models.conf_models",
        "peekOfCode": "class ClientUsers(BasicData):\n    \"\"\"\n    This model for gathering every Employee, Client and Vendor in one\n    table and mark them as client to be shown in the sell service page\n    \"\"\"\n    name = models.CharField(max_length=150, verbose_name=_(\"Client Name\"))\n    updated_user = models.ForeignKey(\n        \"users.CustomUser\",\n        related_name=\"user_make_client_users_changes\",\n        blank=True,",
        "detail": "apps.configurations.models.conf_models",
        "documentation": {}
    },
    {
        "label": "UnitNames",
        "kind": 6,
        "importPath": "apps.configurations.models.conf_models",
        "description": "apps.configurations.models.conf_models",
        "peekOfCode": "class UnitNames(BasicData):\n    name = models.CharField(max_length=100, unique=True)\n    code = models.CharField(\n        max_length=30,\n        blank=True,\n        null=True,\n        verbose_name=_(\"Code\"),\n    )\n    updated_user = models.ForeignKey(\n        \"users.CustomUser\",",
        "detail": "apps.configurations.models.conf_models",
        "documentation": {}
    },
    {
        "label": "Branches",
        "kind": 6,
        "importPath": "apps.configurations.models.conf_models",
        "description": "apps.configurations.models.conf_models",
        "peekOfCode": "class Branches(BasicData):\n    name = models.CharField(max_length=100, unique=True, verbose_name=\"Branch\")\n    description = models.TextField(blank=True, null=True)\n    code = models.CharField(\n        max_length=30,\n        blank=True,\n        null=True,\n        verbose_name=_(\"Code\"),\n    )\n    updated_user = models.ForeignKey(",
        "detail": "apps.configurations.models.conf_models",
        "documentation": {}
    },
    {
        "label": "PosStation",
        "kind": 6,
        "importPath": "apps.configurations.models.conf_models",
        "description": "apps.configurations.models.conf_models",
        "peekOfCode": "class PosStation(BasicData):\n    branch = models.ForeignKey(\n        Branches,\n        related_name=\"pos_branch\",\n        verbose_name=_(\"Branch\"),\n        on_delete=models.CASCADE,\n    )\n    name = models.CharField(max_length=100, unique=True, default=\"Text\")\n    description = models.TextField(blank=True, null=True, default=\"Text\")\n    code = models.CharField(",
        "detail": "apps.configurations.models.conf_models",
        "documentation": {}
    },
    {
        "label": "Departments",
        "kind": 6,
        "importPath": "apps.configurations.models.conf_models",
        "description": "apps.configurations.models.conf_models",
        "peekOfCode": "class Departments(BasicData):\n    code = models.CharField(\n        max_length=30,\n        blank=True,\n        null=True,\n        verbose_name=_(\"Code\"),\n    )\n    name = models.CharField(max_length=100, unique=True)\n    updated_user = models.ForeignKey(\n        \"users.CustomUser\",",
        "detail": "apps.configurations.models.conf_models",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "apps.configurations.models.conf_models",
        "description": "apps.configurations.models.conf_models",
        "peekOfCode": "class Bank(BasicData):\n    name = models.CharField(\n        verbose_name=_(\"Name\"),\n        max_length=100,\n        unique=True,\n    )\n    updated_user = models.ForeignKey(\n        \"users.CustomUser\",\n        related_name=\"user_make_bank_changes\",\n        blank=True,",
        "detail": "apps.configurations.models.conf_models",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "apps.configurations.models.conf_models",
        "description": "apps.configurations.models.conf_models",
        "peekOfCode": "class BankAccount(BasicData):\n    account_no = models.CharField(\n        max_length=150,\n        verbose_name=_(\"Account No.\"),\n        unique=True,\n        # blank=True, null=True\n    )\n    bank = models.ForeignKey(\n        Bank,\n        related_name=\"bank_account\",",
        "detail": "apps.configurations.models.conf_models",
        "documentation": {}
    },
    {
        "label": "DoctorSpecializations",
        "kind": 6,
        "importPath": "apps.configurations.models.doctors_models",
        "description": "apps.configurations.models.doctors_models",
        "peekOfCode": "class DoctorSpecializations(BasicData):\n    name = models.CharField(\n        max_length=100, unique=True, verbose_name=\"Doctor Specialization\"\n    )\n    # doctor = models.OneToOneField(\n    #     DoctorNames,\n    #     related_name=\"doctor_name_specializations\",\n    #     on_delete=models.CASCADE,\n    # )\n    code = models.CharField(",
        "detail": "apps.configurations.models.doctors_models",
        "documentation": {}
    },
    {
        "label": "DoctorNames",
        "kind": 6,
        "importPath": "apps.configurations.models.doctors_models",
        "description": "apps.configurations.models.doctors_models",
        "peekOfCode": "class DoctorNames(BasicData):\n    name = models.CharField(max_length=100, unique=True, verbose_name=\"Doctor Name\")\n    code = models.CharField(\n        max_length=15,\n        blank=True,\n        null=True,\n        verbose_name=_(\"Code\"),\n    )\n    specializations = models.ManyToManyField(\n        DoctorSpecializations,",
        "detail": "apps.configurations.models.doctors_models",
        "documentation": {}
    },
    {
        "label": "add_daily_task",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def add_daily_task(request):\n    data = {}\n    data['daily_task_id'] = None \n    if request.accepts('*/*') and request.method == \"POST\":\n        form = DailyTaskForm(\n            request.POST or None, \n        )\n        active = request.POST.get(\"active\")\n        print(\"ACTIVE@@@************\", active)\n        for f in form:",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "edit_daily_task",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def edit_daily_task(request, id):\n    data = {}\n    data['daily_task_id'] = id \n    qs = DailyTask.objects.select_related('user').get(id=id)\n    form = DailyTaskForm(\n        request.POST or None,\n        request.FILES or None, \n        instance=qs,\n    )\n    for f in form:",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "create_ajax_daily_task_message",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def create_ajax_daily_task_message(request):\n    data = {}\n    data['daily_task_id'] = None \n    data['error'] = 'ERROR !!!'\n    data['type'] = 'error'\n    if request.is_ajax() and request.method == \"POST\":\n        form = DailyTaskForm(request.POST or None)\n        daily_task_name = request.POST.get(\"daily_task_name\") \n        match = DailyTask.objects.select_related('user').filter(name=daily_task_name).exists()\n        if not match:",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "daily_task_table",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def daily_task_table(request):\n    show_log = request.GET.get(\"show-log\")\n    show_deleted = request.GET.get(\"show-deleted\")\n    in_active = request.GET.get(\"in-active\")\n    is_active = request.GET.get(\"is-active\")\n    show_main = request.GET.get('show-main')\n    print(\n        \"show_log===\",show_log,\n        \"show_deleted===\",show_deleted,\n        \"in_active===\",in_active,",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "unit_pricing_add",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def unit_pricing_add(request, id):\n    data = {}\n    app_name = 'configurations'\n    model_name = 'DailyTaskUOM'\n    cls = apps.get_model(app_name, model_name)\n    product_unit = cls.objects.select_related(\n        'daily_task'\n    ).filter(id=id).order_by('id')\n    uoms = []\n    # print('VALUES******', [obj ",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "unit_pricing",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def unit_pricing(request, id):\n    # from .helper import convert_unit\n    data = {}\n    app_name = 'configurations'\n    model_name = 'DailyTaskUOM'\n    cls = apps.get_model(app_name, model_name)\n    product_unit = cls.objects.select_related(\n        'daily_task'\n    ).filter(id=id).order_by('id')\n    uoms = []",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "add_uom_sale",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def add_uom_sale(request, id):\n    data = {}\n    value_list = request.GET.getlist('value-list[]')\n    percentage_list = request.GET.getlist('percentage-list[]')\n    product_price_list = request.GET.getlist('price-list[]')\n    uom_id_list = request.GET.getlist('uom-id-list[]')\n    uom = DailyTaskUOM.objects.select_related(\n        'daily_task').filter(\n            daily_task_id=id\n            ).order_by('id')",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "update_sale_tab",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def update_sale_tab(request, id):\n    data = {}\n    unit_purchase = DailyTaskUnitPurchase.objects.values_list(\n        'unit_price', flat=True\n    ).filter(\n        uom__daily_task_id=id\n        )\n    print([obj for obj in unit_purchase])\n    data['unit_price'] = [obj for obj in unit_purchase]\n    return JsonResponse(data)",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "add_uom_purchase",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def add_uom_purchase(request, id):\n    data = {}\n    # data['price_list'] = []\n    product_price_list = request.GET.getlist('price-list[]')\n    uom_id_list = request.GET.getlist('uom-id-list[]')\n    uom = DailyTaskUOM.objects.select_related(\n        'daily_task').filter(\n            daily_task_id=id\n            )\n    uom_ids = [obj.id for obj in uom]",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "ajax_get",
        "kind": 2,
        "importPath": "apps.configurations.views.daily_task",
        "description": "apps.configurations.views.daily_task",
        "peekOfCode": "def ajax_get(request):\n    unit_id = request.POST.get(\"unit_id\")\n    if unit_id:\n        unit = UnitNames.objects.values_list(\n            'name', flat=True).filter(id=unit_id)\n    else:\n        unit = []\n    data = {\n        \"unit\": [obj for obj in unit],\n    }",
        "detail": "apps.configurations.views.daily_task",
        "documentation": {}
    },
    {
        "label": "add_departments",
        "kind": 2,
        "importPath": "apps.configurations.views.departments",
        "description": "apps.configurations.views.departments",
        "peekOfCode": "def add_departments(request):\n    data = {}\n    data['department_id'] = None \n    data['error'] = 'ERROR !!!'\n    data['type'] = 'error'\n    if request.accepts('*/*') and request.method == \"POST\":\n        form = DepartmentsForm(\n            request.POST or None, \n        )\n        for f in form:",
        "detail": "apps.configurations.views.departments",
        "documentation": {}
    },
    {
        "label": "edit_departments",
        "kind": 2,
        "importPath": "apps.configurations.views.departments",
        "description": "apps.configurations.views.departments",
        "peekOfCode": "def edit_departments(request, id):\n    data = {}\n    # data['Departments_id'] = id \n    # data['error'] = 'ERROR !!!'\n    # data['type'] = 'error'\n    qs = Departments.objects.select_related('user').get(id=id)\n    form = DepartmentsForm(\n        request.POST or None,\n        request.FILES or None, \n        instance=qs,",
        "detail": "apps.configurations.views.departments",
        "documentation": {}
    },
    {
        "label": "create_ajax_department_message",
        "kind": 2,
        "importPath": "apps.configurations.views.departments",
        "description": "apps.configurations.views.departments",
        "peekOfCode": "def create_ajax_department_message(request):\n    data = {}\n    data['brannches_id'] = None \n    data['error'] = 'ERROR !!!'\n    data['type'] = 'error'\n    if request.is_ajax() and request.method == \"POST\":\n        form = DepartmentsForm(request.POST or None)\n        department_name = request.POST.get(\"department_name\") \n        match = Departments.objects.select_related('user').filter(name=department_name).exists()\n        if not match:",
        "detail": "apps.configurations.views.departments",
        "documentation": {}
    },
    {
        "label": "departments_table",
        "kind": 2,
        "importPath": "apps.configurations.views.departments",
        "description": "apps.configurations.views.departments",
        "peekOfCode": "def departments_table(request):\n    show_log = request.GET.get(\"show-log\")\n    show_deleted = request.GET.get(\"show-deleted\")\n    in_active = request.GET.get(\"in-active\")\n    is_active = request.GET.get(\"active\")\n    show_main = request.GET.get('show-main')\n    print(\n        # 'TYPE****', type,\n        'show_log@@@@@@@@@@@', show_log,\n        \"SHOW DELETEDDDDDD\",show_deleted,",
        "detail": "apps.configurations.views.departments",
        "documentation": {}
    },
    {
        "label": "DoctorView",
        "kind": 6,
        "importPath": "apps.configurations.views.doctors",
        "description": "apps.configurations.views.doctors",
        "peekOfCode": "class DoctorView(CreateView):  # (TemplateView):\n    template_name = \"configurations/doctors/add_doctors.html\"\n    form_class = DoctorNamesForm\n    queryset = DoctorNames.objects.only()[:100]\n    success_url = reverse_lazy(\"configurations:add-doctor\")\n    def post(self, request, *args, **kwargs):\n        \"\"\"\n        Handle POST requests: instantiate a form instance with the passed\n        POST variables and then check if it's valid.\n        \"\"\"",
        "detail": "apps.configurations.views.doctors",
        "documentation": {}
    },
    {
        "label": "DoctorUpdateView",
        "kind": 6,
        "importPath": "apps.configurations.views.doctors",
        "description": "apps.configurations.views.doctors",
        "peekOfCode": "class DoctorUpdateView(UpdateView):\n    model = DoctorNames\n    template_name = \"configurations/doctors/edit_doctors.html\"\n    pk_url_kwarg = \"id\"\n    queryset = DoctorNames.objects.all()\n    form_class = DoctorNamesForm\n    template_name_suffix = \"_update_form\"\n    success_url = reverse_lazy(\"configurations:edit-doctor-names\")\n    def form_invalid(self, form):\n        \"\"\"If the form is invalid, render the invalid form.\"\"\"",
        "detail": "apps.configurations.views.doctors",
        "documentation": {}
    },
    {
        "label": "DoctorListView",
        "kind": 6,
        "importPath": "apps.configurations.views.doctors",
        "description": "apps.configurations.views.doctors",
        "peekOfCode": "class DoctorListView(ListView):\n    \"\"\"\n    for patient-table, patient-cards and search patients in patient cards\n    \"\"\"\n    model = DoctorNames\n    template_name = \"doctors/doctors_table.html\"\n    queryset = DoctorNames.objects.only().order_by(\"-id\")  # [:100]\n    # def get(self, request, *args, **kwargs):\n    #     patient_search = request.GET.get(\"pat\")\n    #     if patient_search is not None and patient_search != \"\":",
        "detail": "apps.configurations.views.doctors",
        "documentation": {}
    },
    {
        "label": "add_equipments",
        "kind": 2,
        "importPath": "apps.configurations.views.equipments",
        "description": "apps.configurations.views.equipments",
        "peekOfCode": "def add_equipments(request):\n    data = {}\n    data[\"equipments_id\"] = None\n    if request.accepts(\"*/*\") and request.method == \"POST\":\n        form = EquipmentsForm(\n            request.POST or None,\n        )\n        for f in form:\n            print(f.name, f.errors)\n            if not f.errors:",
        "detail": "apps.configurations.views.equipments",
        "documentation": {}
    },
    {
        "label": "edit_equipments",
        "kind": 2,
        "importPath": "apps.configurations.views.equipments",
        "description": "apps.configurations.views.equipments",
        "peekOfCode": "def edit_equipments(request, id):\n    data = {}\n    data[\"equipments_id\"] = id\n    qs = Equipments.objects.select_related(\"user\").get(id=id)\n    form = EquipmentsForm(\n        request.POST or None,\n        request.FILES or None,\n        instance=qs,\n    )\n    for f in form:",
        "detail": "apps.configurations.views.equipments",
        "documentation": {}
    },
    {
        "label": "create_ajax_equipments_message",
        "kind": 2,
        "importPath": "apps.configurations.views.equipments",
        "description": "apps.configurations.views.equipments",
        "peekOfCode": "def create_ajax_equipments_message(request):\n    data = {}\n    data[\"equipments_id\"] = None\n    data[\"error\"] = \"ERROR !!!\"\n    data[\"type\"] = \"error\"\n    if request.is_ajax() and request.method == \"POST\":\n        form = EquipmentsForm(request.POST or None)\n        equipments_name = request.POST.get(\"equipments_name\")\n        match = (\n            Equipments.objects.select_related(\"user\")",
        "detail": "apps.configurations.views.equipments",
        "documentation": {}
    },
    {
        "label": "equipments_table",
        "kind": 2,
        "importPath": "apps.configurations.views.equipments",
        "description": "apps.configurations.views.equipments",
        "peekOfCode": "def equipments_table(request):\n    show_log = request.GET.get(\"show-log\")\n    show_deleted = request.GET.get(\"show-deleted\")\n    in_active = request.GET.get(\"in-active\")\n    is_active = request.GET.get(\"is-active\")\n    show_main = request.GET.get(\"show-main\")\n    print(\n        \"show_log===\",\n        show_log,\n        \"show_deleted===\",",
        "detail": "apps.configurations.views.equipments",
        "documentation": {}
    },
    {
        "label": "add_payment_method",
        "kind": 2,
        "importPath": "apps.configurations.views.payment_method",
        "description": "apps.configurations.views.payment_method",
        "peekOfCode": "def add_payment_method(request):\n    data = {}\n    data[\"payment_method_id\"] = None\n    if request.accepts(\"*/*\") and request.method == \"POST\":\n        form = PaymentMethodForm(\n            request.POST or None,\n        )\n        active = request.POST.get(\"active\")\n        print(\"ACTIVE@@@************\", active)\n        for f in form:",
        "detail": "apps.configurations.views.payment_method",
        "documentation": {}
    },
    {
        "label": "edit_payment_method",
        "kind": 2,
        "importPath": "apps.configurations.views.payment_method",
        "description": "apps.configurations.views.payment_method",
        "peekOfCode": "def edit_payment_method(request, id):\n    data = {}\n    data[\"payment_method_id\"] = id\n    qs = PaymentMethod.objects.select_related(\"user\").get(id=id)\n    form = PaymentMethodForm(\n        request.POST or None,\n        request.FILES or None,\n        instance=qs,\n    )\n    for f in form:",
        "detail": "apps.configurations.views.payment_method",
        "documentation": {}
    },
    {
        "label": "create_ajax_payment_method_message",
        "kind": 2,
        "importPath": "apps.configurations.views.payment_method",
        "description": "apps.configurations.views.payment_method",
        "peekOfCode": "def create_ajax_payment_method_message(request):\n    data = {}\n    data[\"payment_method_id\"] = None\n    data[\"error\"] = \"ERROR !!!\"\n    data[\"type\"] = \"error\"\n    if request.is_ajax() and request.method == \"POST\":\n        form = PaymentMethodForm(request.POST or None)\n        payment_method_name = request.POST.get(\"payment_method_name\")\n        match = (\n            PaymentMethod.objects.select_related(\"user\")",
        "detail": "apps.configurations.views.payment_method",
        "documentation": {}
    },
    {
        "label": "payment_method_table",
        "kind": 2,
        "importPath": "apps.configurations.views.payment_method",
        "description": "apps.configurations.views.payment_method",
        "peekOfCode": "def payment_method_table(request):\n    show_log = request.GET.get(\"show-log\")\n    show_deleted = request.GET.get(\"show-deleted\")\n    in_active = request.GET.get(\"in-active\")\n    is_active = request.GET.get(\"is-active\")\n    show_main = request.GET.get(\"show-main\")\n    print(\n        \"show_log===\",\n        show_log,\n        \"show_deleted===\",",
        "detail": "apps.configurations.views.payment_method",
        "documentation": {}
    },
    {
        "label": "add_tools",
        "kind": 2,
        "importPath": "apps.configurations.views.tools",
        "description": "apps.configurations.views.tools",
        "peekOfCode": "def add_tools(request):\n    data = {}\n    data[\"tools_id\"] = None\n    if request.accepts(\"*/*\") and request.method == \"POST\":\n        form = ToolsForm(\n            request.POST or None,\n        )\n        for f in form:\n            print(f.name, f.errors)\n            if not f.errors:",
        "detail": "apps.configurations.views.tools",
        "documentation": {}
    },
    {
        "label": "edit_tools",
        "kind": 2,
        "importPath": "apps.configurations.views.tools",
        "description": "apps.configurations.views.tools",
        "peekOfCode": "def edit_tools(request, id):\n    data = {}\n    data[\"tools_id\"] = id\n    qs = Tools.objects.select_related(\"user\").get(id=id)\n    form = ToolsForm(\n        request.POST or None,\n        request.FILES or None,\n        instance=qs,\n    )\n    for f in form:",
        "detail": "apps.configurations.views.tools",
        "documentation": {}
    },
    {
        "label": "tools_table",
        "kind": 2,
        "importPath": "apps.configurations.views.tools",
        "description": "apps.configurations.views.tools",
        "peekOfCode": "def tools_table(request):\n    show_log = request.GET.get(\"show-log\")\n    show_deleted = request.GET.get(\"show-deleted\")\n    in_active = request.GET.get(\"in-active\")\n    is_active = request.GET.get(\"is-active\")\n    show_main = request.GET.get(\"show-main\")\n    print(\n        \"show_log===\",\n        show_log,\n        \"show_deleted===\",",
        "detail": "apps.configurations.views.tools",
        "documentation": {}
    },
    {
        "label": "add_work_type",
        "kind": 2,
        "importPath": "apps.configurations.views.work_type",
        "description": "apps.configurations.views.work_type",
        "peekOfCode": "def add_work_type(request):\n    data = {}\n    data[\"work_type_id\"] = None\n    if request.accepts(\"*/*\") and request.method == \"POST\":\n        form = WorkTypeForm(\n            request.POST or None,\n        )\n        active = request.POST.get(\"active\")\n        print(\"ACTIVE@@@************\", active)\n        for f in form:",
        "detail": "apps.configurations.views.work_type",
        "documentation": {}
    },
    {
        "label": "edit_work_type",
        "kind": 2,
        "importPath": "apps.configurations.views.work_type",
        "description": "apps.configurations.views.work_type",
        "peekOfCode": "def edit_work_type(request, id):\n    data = {}\n    data[\"work_type_id\"] = id\n    qs = WorkType.objects.select_related(\"user\").get(id=id)\n    form = WorkTypeForm(\n        request.POST or None,\n        request.FILES or None,\n        instance=qs,\n    )\n    for f in form:",
        "detail": "apps.configurations.views.work_type",
        "documentation": {}
    },
    {
        "label": "create_ajax_work_type_message",
        "kind": 2,
        "importPath": "apps.configurations.views.work_type",
        "description": "apps.configurations.views.work_type",
        "peekOfCode": "def create_ajax_work_type_message(request):\n    data = {}\n    data[\"work_type_id\"] = None\n    data[\"error\"] = \"ERROR !!!\"\n    data[\"type\"] = \"error\"\n    if request.is_ajax() and request.method == \"POST\":\n        form = WorkTypeForm(request.POST or None)\n        work_type_name = request.POST.get(\"work_type_name\")\n        match = (\n            WorkType.objects.select_related(\"user\").filter(name=work_type_name).exists()",
        "detail": "apps.configurations.views.work_type",
        "documentation": {}
    },
    {
        "label": "work_type_table",
        "kind": 2,
        "importPath": "apps.configurations.views.work_type",
        "description": "apps.configurations.views.work_type",
        "peekOfCode": "def work_type_table(request):\n    show_log = request.GET.get(\"show-log\")\n    show_deleted = request.GET.get(\"show-deleted\")\n    in_active = request.GET.get(\"in-active\")\n    is_active = request.GET.get(\"is-active\")\n    show_main = request.GET.get(\"show-main\")\n    print(\n        \"show_log===\",\n        show_log,\n        \"show_deleted===\",",
        "detail": "apps.configurations.views.work_type",
        "documentation": {}
    },
    {
        "label": "ConfigurationsConfig",
        "kind": 6,
        "importPath": "apps.configurations.apps",
        "description": "apps.configurations.apps",
        "peekOfCode": "class ConfigurationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.configurations'",
        "detail": "apps.configurations.apps",
        "documentation": {}
    },
    {
        "label": "ClientUsersForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class ClientUsersForm(forms.ModelForm):\n    class Meta:\n        model = ClientUsers\n        fields = [\n            \"name\",\n            \"mobile\",\n            \"balance\",\n        ]\n    # init function is importanat in saving user automatically in create() function\n    def clean(self):",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "UnitNamesForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class UnitNamesForm(forms.ModelForm):\n    class Meta:\n        model = UnitNames\n        fields = [\n            \"name\",\n            \"code\",\n            \"active\",\n            \"is_deleted\",\n        ]\n    # name = forms.CharField(",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "UnitConversionsForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class UnitConversionsForm(forms.ModelForm):\n    class Meta:\n        model = UnitConversions\n        fields = [\n            \"unit_1\",\n            \"val_1\",\n            \"unit_2\",\n            \"val_2\",\n            \"unit_3\",\n            \"val_3\",",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "BranchForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class BranchForm(forms.ModelForm):\n    class Meta:\n        model = Branches\n        fields = [\n            \"name\",\n            \"description\",\n            \"code\",\n            \"active\",\n            \"is_deleted\",\n        ]",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "PosStationForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class PosStationForm(forms.ModelForm):\n    class Meta:\n        model = PosStation\n        fields = [\n            \"branch\",\n            \"name\",\n            \"description\",\n            \"code\",\n            \"active\",\n            \"is_deleted\",",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "DepartmentsForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class DepartmentsForm(forms.ModelForm):\n    class Meta:\n        model = Departments\n        fields = [\n            \"code\",\n            \"name\",\n            \"active\",\n            \"is_deleted\",\n            # \"updated_user\"\n        ]",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "BankForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class BankForm(forms.ModelForm):\n    class Meta:\n        model = Bank\n        fields = [\n            \"name\",\n            # \"type\",\n            # \"account_no\",\n            # \"bank\",\n            # \"bank_branch\",\n            \"code\",",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "BankAccountForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class BankAccountForm(forms.ModelForm):\n    class Meta:\n        model = BankAccount  # \"configurations.\"\n        fields = [\n            # \"name\",\n            # \"type\",\n            \"code\",\n            \"bank\",\n            \"account_no\",\n            \"bank_branch\",",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "WorkTypeForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class WorkTypeForm(forms.ModelForm):\n    class Meta:\n        model = WorkType\n        fields = [\n            \"name\",\n            \"code\",\n            \"active\",\n            \"is_deleted\",\n        ]\n    def clean(self):",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "PaymentMethodForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class PaymentMethodForm(forms.ModelForm):\n    class Meta:\n        model = PaymentMethod\n        fields = [\n            \"name\",\n            \"code\",\n            \"active\",\n            \"is_deleted\",\n        ]\n    def clean(self):",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "DailyTaskForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class DailyTaskForm(forms.ModelForm):\n    class Meta:\n        model = DailyTask\n        fields = [\n            \"name\",\n            \"code\",\n            \"work_type\",\n            \"description\",\n            \"active\",\n            \"is_deleted\",",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "DailyTaskUOMForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class DailyTaskUOMForm(forms.ModelForm):\n    value = forms.CharField(\n        required=False, widget=forms.TextInput(attrs={\"value\": Decimal(\"0.00\")})\n    )\n    uom_value = forms.CharField(\n        required=False, widget=forms.TextInput(attrs={\"value\": Decimal(\"0.00\")})\n    )\n    unit_price = forms.CharField(\n        required=False, widget=forms.TextInput(attrs={\"value\": Decimal(\"0.00\")})\n    )",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "DailyTaskUnitPurchaseForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class DailyTaskUnitPurchaseForm(forms.ModelForm):\n    # init function is important in saving user automatically in create() function\n    def __init__(self, *args, **kwargs):\n        super(DailyTaskUnitPurchaseForm, self).__init__(*args, **kwargs)\n    class Meta:\n        model = DailyTaskUnitPurchase\n        fields = [\"unit_price\"]\nclass DailyTaskUnitSaleForm(forms.ModelForm):\n    # init function is important in saving user automatically in create() function\n    def __init__(self, *args, **kwargs):",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "DailyTaskUnitSaleForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class DailyTaskUnitSaleForm(forms.ModelForm):\n    # init function is important in saving user automatically in create() function\n    def __init__(self, *args, **kwargs):\n        super(DailyTaskUnitSaleForm, self).__init__(*args, **kwargs)\n    class Meta:\n        model = DailyTaskUnitSale\n        fields = [\n            \"value\",\n            \"percentage\",\n            \"unit_price\",",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "EquipmentsForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class EquipmentsForm(forms.ModelForm):\n    class Meta:\n        model = Equipments\n        fields = [\n            \"code\",\n            \"equip_type\",\n            \"brand\",\n            \"model\",\n            \"manufacturing_year\",\n            \"current_status\",",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "ToolsForm",
        "kind": 6,
        "importPath": "apps.configurations.forms",
        "description": "apps.configurations.forms",
        "peekOfCode": "class ToolsForm(forms.ModelForm):\n    class Meta:\n        model = Tools\n        fields = [\n            \"code\",\n            \"name\",\n            \"brand\",\n            \"model\",\n            \"manufacturing_year\",\n            \"current_status\",",
        "detail": "apps.configurations.forms",
        "documentation": {}
    },
    {
        "label": "ClientUsers",
        "kind": 6,
        "importPath": "apps.configurations.models_old",
        "description": "apps.configurations.models_old",
        "peekOfCode": "class ClientUsers(BasicData):\n    '''\n        This model for gathering every Employee, Client and Vendor in one \n        table and mark them as client to be shown in the sell service page\n    '''\n    name = models.CharField(\n        max_length=150,\n        verbose_name=_('Client Name')\n    )\n    updated_user = models.ForeignKey(",
        "detail": "apps.configurations.models_old",
        "documentation": {}
    },
    {
        "label": "UnitNames",
        "kind": 6,
        "importPath": "apps.configurations.models_old",
        "description": "apps.configurations.models_old",
        "peekOfCode": "class UnitNames(BasicData):\n    name = models.CharField(\n        max_length=100, \n        unique=True\n    )\n    code = models.CharField(\n        max_length=30,\n        blank=True, null=True,\n        verbose_name=_(\"Code\"),\n    )",
        "detail": "apps.configurations.models_old",
        "documentation": {}
    },
    {
        "label": "Branches",
        "kind": 6,
        "importPath": "apps.configurations.models_old",
        "description": "apps.configurations.models_old",
        "peekOfCode": "class Branches(BasicData):\n    name = models.CharField(max_length=100, unique=True, verbose_name=\"Branch\")\n    description = models.TextField(blank=True, null=True)\n    code = models.CharField(\n        max_length=30,\n        blank=True, null=True,\n        verbose_name=_(\"Code\"),\n    )\n    updated_user = models.ForeignKey(\n        \"users.CustomUser\",",
        "detail": "apps.configurations.models_old",
        "documentation": {}
    },
    {
        "label": "PosStation",
        "kind": 6,
        "importPath": "apps.configurations.models_old",
        "description": "apps.configurations.models_old",
        "peekOfCode": "class PosStation(BasicData):\n    branch = models.ForeignKey(\n        Branches,\n        related_name=\"pos_branch\",\n        verbose_name=_(\"Branch\"),\n        on_delete=models.CASCADE,\n    )\n    name = models.CharField(max_length=100, unique=True, default=\"Text\")\n    description = models.TextField(blank=True, null=True, default=\"Text\")\n    code = models.CharField(",
        "detail": "apps.configurations.models_old",
        "documentation": {}
    },
    {
        "label": "Departments",
        "kind": 6,
        "importPath": "apps.configurations.models_old",
        "description": "apps.configurations.models_old",
        "peekOfCode": "class Departments(BasicData):\n    code = models.CharField(\n        max_length=30,\n        blank=True, null=True,\n        verbose_name=_(\"Code\"),\n    )\n    name = models.CharField(\n        max_length=100,\n        unique=True\n    )",
        "detail": "apps.configurations.models_old",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "apps.configurations.models_old",
        "description": "apps.configurations.models_old",
        "peekOfCode": "class Bank(BasicData):\n    name = models.CharField(\n        verbose_name=_(\"Name\"), \n        max_length=100,\n        unique=True,\n    )\n    updated_user = models.ForeignKey(\n        \"users.CustomUser\", \n        related_name=\"user_make_bank_changes\", \n        blank=True, null=True, on_delete=models.CASCADE",
        "detail": "apps.configurations.models_old",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "apps.configurations.models_old",
        "description": "apps.configurations.models_old",
        "peekOfCode": "class BankAccount(BasicData):\n    account_no = models.CharField(\n        max_length=150, \n        verbose_name=_(\"Account No.\"), \n        unique=True,\n        # blank=True, null=True\n    )\n    bank = models.ForeignKey(\n        Bank, \n        related_name=\"bank_account\",",
        "detail": "apps.configurations.models_old",
        "documentation": {}
    },
    {
        "label": "UnitConversions",
        "kind": 6,
        "importPath": "apps.configurations.models_old",
        "description": "apps.configurations.models_old",
        "peekOfCode": "class UnitConversions(BasicData):\n    product = models.ForeignKey(\n        'products.Product', \n        related_name=\"unit_conversions_products\",\n        default=\"\",\n        on_delete=models.CASCADE\n    )\n    unit_1 = models.CharField(\n        max_length=50,\n        #choices=((obj, obj)for obj in UnitNames.objects.values_list('name', flat=True)),",
        "detail": "apps.configurations.models_old",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "apps.configurations.urls",
        "description": "apps.configurations.urls",
        "peekOfCode": "app_name = \"configurations\"\nurlpatterns = [\n    # ? ------- Doctor Names Urls -------\n    path(\n        \"table/of/all/doctor/names/\",\n        (DoctorListView.as_view()),\n        name=\"doctors-table\",\n    ),\n    path(\n        \"add/doctor/names/\",",
        "detail": "apps.configurations.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.configurations.urls",
        "description": "apps.configurations.urls",
        "peekOfCode": "urlpatterns = [\n    # ? ------- Doctor Names Urls -------\n    path(\n        \"table/of/all/doctor/names/\",\n        (DoctorListView.as_view()),\n        name=\"doctors-table\",\n    ),\n    path(\n        \"add/doctor/names/\",\n        (DoctorView.as_view()),",
        "detail": "apps.configurations.urls",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "apps.configurations.urls_old",
        "description": "apps.configurations.urls_old",
        "peekOfCode": "app_name = \"configurations\"\nurlpatterns = [\n     #? ------- Unit Names Urls -------\n     path(\"table/of/all/unit-names/\",\n          login_required(unit_names_table),\n          name=\"unit_names_table\"\n          ),\n     path(\"add/unit-names/\",\n          login_required(add_unit_names),\n          name=\"add_unit_names\"",
        "detail": "apps.configurations.urls_old",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.configurations.urls_old",
        "description": "apps.configurations.urls_old",
        "peekOfCode": "urlpatterns = [\n     #? ------- Unit Names Urls -------\n     path(\"table/of/all/unit-names/\",\n          login_required(unit_names_table),\n          name=\"unit_names_table\"\n          ),\n     path(\"add/unit-names/\",\n          login_required(add_unit_names),\n          name=\"add_unit_names\"\n          ),",
        "detail": "apps.configurations.urls_old",
        "documentation": {}
    },
    {
        "label": "add_unit_names",
        "kind": 2,
        "importPath": "apps.configurations.views_old",
        "description": "apps.configurations.views_old",
        "peekOfCode": "def add_unit_names(request):\n    data = {}\n    data[\"unit_name_id\"] = None\n    data[\"error\"] = \"ERROR !!!\"\n    data[\"type\"] = \"error\"\n    if request.accepts(\"*/*\") and request.method == \"POST\":\n        form = UnitNamesForm(request.POST or None)\n        unit_name = \"any_name_before_saving\"\n        # save_form = None\n        print(\"formError******\", form.errors.get_json_data())",
        "detail": "apps.configurations.views_old",
        "documentation": {}
    },
    {
        "label": "edit_unit_names",
        "kind": 2,
        "importPath": "apps.configurations.views_old",
        "description": "apps.configurations.views_old",
        "peekOfCode": "def edit_unit_names(request, id):\n    data = {}\n    data[\"unit_name_id\"] = id\n    data[\"error\"] = \"ERROR !!!\"\n    data[\"type\"] = \"error\"\n    # table_qs = Category.objects.filter(user=request.user)\n    # table = CategoryTable(table_qs)\n    # table.paginate(page=request.GET.get(\"page\", 1), per_page=25)\n    qs = UnitNames.objects.select_related(\"user\").get(id=id)  # get the category name\n    print(",
        "detail": "apps.configurations.views_old",
        "documentation": {}
    },
    {
        "label": "unit_names_table",
        "kind": 2,
        "importPath": "apps.configurations.views_old",
        "description": "apps.configurations.views_old",
        "peekOfCode": "def unit_names_table(request):\n    show_log = request.GET.get(\"show-log\")\n    show_deleted = request.GET.get(\"show-deleted\")\n    in_active = request.GET.get(\"in-active\")\n    is_active = request.GET.get(\"active\")\n    show_main = request.GET.get(\"show-main\")\n    print(\n        # 'TYPE****', type,\n        \"show_log@@@@@@@@@@@\",\n        show_log,",
        "detail": "apps.configurations.views_old",
        "documentation": {}
    },
    {
        "label": "DashboardsConfig",
        "kind": 6,
        "importPath": "apps.dashboards.apps",
        "description": "apps.dashboards.apps",
        "peekOfCode": "class DashboardsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.dashboards\"",
        "detail": "apps.dashboards.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.dashboards.urls",
        "description": "apps.dashboards.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"\",\n        DashboardsView.as_view(template_name=\"dashboard_analytics.html\"),\n        name=\"index\",\n    )\n]",
        "detail": "apps.dashboards.urls",
        "documentation": {}
    },
    {
        "label": "DashboardsView",
        "kind": 6,
        "importPath": "apps.dashboards.views",
        "description": "apps.dashboards.views",
        "peekOfCode": "class DashboardsView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        return context",
        "detail": "apps.dashboards.views",
        "documentation": {}
    },
    {
        "label": "ExtendedUiConfig",
        "kind": 6,
        "importPath": "apps.extended_ui.apps",
        "description": "apps.extended_ui.apps",
        "peekOfCode": "class ExtendedUiConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.extended_ui\"",
        "detail": "apps.extended_ui.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.extended_ui.urls",
        "description": "apps.extended_ui.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"extended_ui/perfect_scrollbar/\",\n        ExtendedUiView.as_view(template_name=\"extended_ui_perfect_scrollbar.html\"),\n        name=\"extended-ui-perfect-scrollbar\",\n    ),\n    path(\n        \"extended_ui/text_divider/\",\n        ExtendedUiView.as_view(template_name=\"extended_ui_text_divider.html\"),\n        name=\"extended-ui-text-divider\",",
        "detail": "apps.extended_ui.urls",
        "documentation": {}
    },
    {
        "label": "ExtendedUiView",
        "kind": 6,
        "importPath": "apps.extended_ui.views",
        "description": "apps.extended_ui.views",
        "peekOfCode": "class ExtendedUiView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        return context",
        "detail": "apps.extended_ui.views",
        "documentation": {}
    },
    {
        "label": "FormlayoutsConfig",
        "kind": 6,
        "importPath": "apps.form_layouts.apps",
        "description": "apps.form_layouts.apps",
        "peekOfCode": "class FormlayoutsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.form_layouts\"",
        "detail": "apps.form_layouts.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.form_layouts.urls",
        "description": "apps.form_layouts.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"form/layouts_vertical/\",\n        FormLayoutsView.as_view(template_name=\"form_layouts_vertical.html\"),\n        name=\"form-layouts-vertical\",\n    ),\n    path(\n        \"form/layouts_horizontal/\",\n        FormLayoutsView.as_view(template_name=\"form_layouts_horizontal.html\"),\n        name=\"form-layouts-horizontal\",",
        "detail": "apps.form_layouts.urls",
        "documentation": {}
    },
    {
        "label": "FormLayoutsView",
        "kind": 6,
        "importPath": "apps.form_layouts.views",
        "description": "apps.form_layouts.views",
        "peekOfCode": "class FormLayoutsView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        return context",
        "detail": "apps.form_layouts.views",
        "documentation": {}
    },
    {
        "label": "FormsConfig",
        "kind": 6,
        "importPath": "apps.forms.apps",
        "description": "apps.forms.apps",
        "peekOfCode": "class FormsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.forms\"",
        "detail": "apps.forms.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.forms.urls",
        "description": "apps.forms.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"forms/basic_inputs/\",\n        FormsView.as_view(template_name=\"forms_basic_inputs.html\"),\n        name=\"forms-basic-inputs\",\n    ),\n    path(\n        \"forms/input_groups/\",\n        FormsView.as_view(template_name=\"forms_input_groups.html\"),\n        name=\"forms-input-groups\",",
        "detail": "apps.forms.urls",
        "documentation": {}
    },
    {
        "label": "FormsView",
        "kind": 6,
        "importPath": "apps.forms.views",
        "description": "apps.forms.views",
        "peekOfCode": "class FormsView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        return context",
        "detail": "apps.forms.views",
        "documentation": {}
    },
    {
        "label": "IconsConfig",
        "kind": 6,
        "importPath": "apps.icons.apps",
        "description": "apps.icons.apps",
        "peekOfCode": "class IconsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.icons\"",
        "detail": "apps.icons.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.icons.urls",
        "description": "apps.icons.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"icons/mdi/\",\n        IconsView.as_view(template_name=\"icons_mdi.html\"),\n        name=\"icons-mdi\",\n    ),\n]",
        "detail": "apps.icons.urls",
        "documentation": {}
    },
    {
        "label": "IconsView",
        "kind": 6,
        "importPath": "apps.icons.views",
        "description": "apps.icons.views",
        "peekOfCode": "class IconsView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        return context",
        "detail": "apps.icons.views",
        "documentation": {}
    },
    {
        "label": "LayoutsConfig",
        "kind": 6,
        "importPath": "apps.layouts.apps",
        "description": "apps.layouts.apps",
        "peekOfCode": "class LayoutsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.layouts\"",
        "detail": "apps.layouts.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.layouts.urls",
        "description": "apps.layouts.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"layouts/without_menu/\",\n        WithoutMenuView.as_view(template_name=\"layouts_without_menu.html\"),\n        name=\"layouts-without-menu\",\n    ),\n    path(\n        \"layouts/without_navbar/\",\n        WithoutNavView.as_view(template_name=\"layouts_without_navbar.html\"),\n        name=\"layouts-without-navbar\",",
        "detail": "apps.layouts.urls",
        "documentation": {}
    },
    {
        "label": "WithoutMenuView",
        "kind": 6,
        "importPath": "apps.layouts.views",
        "description": "apps.layouts.views",
        "peekOfCode": "class WithoutMenuView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        # Update the context\n        context.update(\n            {\n                \"is_menu\": False,\n            }",
        "detail": "apps.layouts.views",
        "documentation": {}
    },
    {
        "label": "WithoutNavView",
        "kind": 6,
        "importPath": "apps.layouts.views",
        "description": "apps.layouts.views",
        "peekOfCode": "class WithoutNavView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        # Update the context\n        context.update(\n            {\n                \"is_navbar\": False,\n                \"navbar_type\": \"hidden\",",
        "detail": "apps.layouts.views",
        "documentation": {}
    },
    {
        "label": "FluidView",
        "kind": 6,
        "importPath": "apps.layouts.views",
        "description": "apps.layouts.views",
        "peekOfCode": "class FluidView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        # Update the context\n        context.update(\n            {\n                \"content_layout\": \"wide\",\n            }",
        "detail": "apps.layouts.views",
        "documentation": {}
    },
    {
        "label": "ContainerView",
        "kind": 6,
        "importPath": "apps.layouts.views",
        "description": "apps.layouts.views",
        "peekOfCode": "class ContainerView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        # Update the context\n        context.update(\n            {\n                \"content_layout\": \"compact\",\n            }",
        "detail": "apps.layouts.views",
        "documentation": {}
    },
    {
        "label": "BlankView",
        "kind": 6,
        "importPath": "apps.layouts.views",
        "description": "apps.layouts.views",
        "peekOfCode": "class BlankView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        # Update the context\n        context.update(\n            {\n                \"layout_path\": TemplateHelper.set_layout(\"layout_blank.html\", context),\n            }",
        "detail": "apps.layouts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0001_initial",
        "description": "apps.management.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"CreateVisa\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(",
        "detail": "apps.management.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0002_initial",
        "description": "apps.management.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"management\", \"0001_initial\"),\n        (\"configurations\", \"0002_initial\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"createwallet\",",
        "detail": "apps.management.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0003_remove_createwallet_balance_createvisa_total_and_more",
        "description": "apps.management.migrations.0003_remove_createwallet_balance_createvisa_total_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"management\", \"0002_initial\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"createwallet\",\n            name=\"balance\",\n        ),\n        migrations.AddField(",
        "detail": "apps.management.migrations.0003_remove_createwallet_balance_createvisa_total_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0004_remove_createvisa_total_remove_createwallet_total_and_more",
        "description": "apps.management.migrations.0004_remove_createvisa_total_remove_createwallet_total_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"configurations\", \"0004_remove_bankaccount_total_and_more\"),\n        (\"management\", \"0003_remove_createwallet_balance_createvisa_total_and_more\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"createvisa\",\n            name=\"total\",\n        ),",
        "detail": "apps.management.migrations.0004_remove_createvisa_total_remove_createwallet_total_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0005_remove_createwallet_balance_createvisa_total_and_more",
        "description": "apps.management.migrations.0005_remove_createwallet_balance_createvisa_total_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"configurations\", \"0005_bankaccount_total_clientusers_is_client_and_more\"),\n        (\n            \"management\",\n            \"0004_remove_createvisa_total_remove_createwallet_total_and_more\",\n        ),\n    ]\n    operations = [\n        migrations.RemoveField(",
        "detail": "apps.management.migrations.0005_remove_createwallet_balance_createvisa_total_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0006_alter_createvisa_total_alter_createwallet_total",
        "description": "apps.management.migrations.0006_alter_createvisa_total_alter_createwallet_total",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"management\", \"0005_remove_createwallet_balance_createvisa_total_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"createvisa\",\n            name=\"total\",\n            field=models.DecimalField(\n                blank=True,",
        "detail": "apps.management.migrations.0006_alter_createvisa_total_alter_createwallet_total",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0007_createvisa_code_createwallet_code_and_more",
        "description": "apps.management.migrations.0007_createvisa_code_createwallet_code_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"management\", \"0006_alter_createvisa_total_alter_createwallet_total\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"createvisa\",\n            name=\"code\",\n            field=models.CharField(\n                blank=True, max_length=30, null=True, verbose_name=\"Code\"",
        "detail": "apps.management.migrations.0007_createvisa_code_createwallet_code_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0008_walletname",
        "description": "apps.management.migrations.0008_walletname",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"management\", \"0007_createvisa_code_createwallet_code_and_more\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"WalletName\",\n            fields=[\n                (",
        "detail": "apps.management.migrations.0008_walletname",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0009_createwallet_wallet_name_createwallet_wallet_type",
        "description": "apps.management.migrations.0009_createwallet_wallet_name_createwallet_wallet_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"management\", \"0008_walletname\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"createwallet\",\n            name=\"wallet_name\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "apps.management.migrations.0009_createwallet_wallet_name_createwallet_wallet_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.management.migrations.0010_createvisa_is_client_createwallet_is_client_and_more",
        "description": "apps.management.migrations.0010_createvisa_is_client_createwallet_is_client_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"management\", \"0009_createwallet_wallet_name_createwallet_wallet_type\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"createvisa\",\n            name=\"is_client\",\n            field=models.BooleanField(blank=True, default=False, null=True),\n        ),",
        "detail": "apps.management.migrations.0010_createvisa_is_client_createwallet_is_client_and_more",
        "documentation": {}
    },
    {
        "label": "ManagementConfig",
        "kind": 6,
        "importPath": "apps.management.apps",
        "description": "apps.management.apps",
        "peekOfCode": "class ManagementConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.management'",
        "detail": "apps.management.apps",
        "documentation": {}
    },
    {
        "label": "PAYMENT_WALLET",
        "kind": 5,
        "importPath": "apps.management.choices",
        "description": "apps.management.choices",
        "peekOfCode": "PAYMENT_WALLET = (\n    (0, \"--Select Wallet Name--\"),\n    (1, \"Vodafone\"),\n    (2, \"Etisalate\"),\n    (3, \"We\"),\n    (4, \"Pay Mob\"),\n    (5, \"Insta Pay\"),\n    (6, \"Orange\")\n)\nWALLET_TYPE = (",
        "detail": "apps.management.choices",
        "documentation": {}
    },
    {
        "label": "WALLET_TYPE",
        "kind": 5,
        "importPath": "apps.management.choices",
        "description": "apps.management.choices",
        "peekOfCode": "WALLET_TYPE = (\n    (0,\"--Select Wallet Type--\"),\n    (1, \"Mobile\"),\n    (2,\"Account Name\")\n)",
        "detail": "apps.management.choices",
        "documentation": {}
    },
    {
        "label": "CreateVisaForm",
        "kind": 6,
        "importPath": "apps.management.forms",
        "description": "apps.management.forms",
        "peekOfCode": "class CreateVisaForm(forms.ModelForm):\n    class Meta:\n        model = CreateVisa\n        fields = [\n            'visa_name', \n            'expire_date', \n            'visa_no', \n            'bank', \n            'bank_branch', \n            'account_no',",
        "detail": "apps.management.forms",
        "documentation": {}
    },
    {
        "label": "WalletNameForm",
        "kind": 6,
        "importPath": "apps.management.forms",
        "description": "apps.management.forms",
        "peekOfCode": "class WalletNameForm(forms.ModelForm):\n    class Meta:\n        model = WalletName\n        fields = [\n            \"name\",\n            \"description\",\n            \"code\",\n            \"active\",\n            \"is_deleted\",\n        ]",
        "detail": "apps.management.forms",
        "documentation": {}
    },
    {
        "label": "CreateWalletForm",
        "kind": 6,
        "importPath": "apps.management.forms",
        "description": "apps.management.forms",
        "peekOfCode": "class CreateWalletForm(forms.ModelForm):\n    name = forms.IntegerField(\n            required=False,\n            widget=forms.Select(\n                choices=choices.PAYMENT_WALLET\n            )\n        )\n    class Meta:\n        model = CreateWallet\n        fields = [",
        "detail": "apps.management.forms",
        "documentation": {}
    },
    {
        "label": "UploadTo",
        "kind": 6,
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "peekOfCode": "class UploadTo(object):\n    def __init__(self, path):\n        self.sub_path = path\n    def __call__(self, instance, filename):\n        ext = filename.split(\".\")[-1]\n        # file_name = \"\"\n        # get filename\n        # client = \"\"\n        # company = \"\"\n        if instance == \"Client\":",
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "BasicData",
        "kind": 6,
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "peekOfCode": "class BasicData(models.Model):\n    user = models.ForeignKey(\n        \"users.CustomUser\",\n        default=\"\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        # related_name=\"user_create_object\",\n    )\n    active = models.BooleanField(default=False, verbose_name=_(\"Active\"))",
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "ClientBasicData",
        "kind": 6,
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "peekOfCode": "class ClientBasicData(models.Model):\n    branch = models.ForeignKey(\n        \"configurations.Branches\",\n        blank=True,\n        null=True,\n        on_delete=models.CASCADE,\n    )\n    phone = models.CharField(max_length=25, blank=True, null=True)\n    mobile1 = models.CharField(max_length=25, blank=True, null=True, unique=True)\n    mobile2 = models.CharField(max_length=25, blank=True, null=True, unique=True)",
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "WalletName",
        "kind": 6,
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "peekOfCode": "class WalletName(BasicData):\n    name = models.CharField(max_length=100, unique=True, verbose_name=\"wallet\")\n    description = models.TextField(blank=True, null=True)\n    code = models.CharField(\n        max_length=30,\n        blank=True,\n        null=True,\n        verbose_name=_(\"Code\"),\n    )\n    updated_user = models.ForeignKey(",
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "ServicePayment",
        "kind": 6,
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "peekOfCode": "class ServicePayment(models.Model):\n    payment_methods = models.IntegerField(\n        null=True,\n        blank=True,\n        choices=choices.PAYMENT_METHODS,\n        verbose_name=_(\"Payment Methods\"),\n        default=0,\n    )\n    cash_methods = models.IntegerField(\n        default=0,  # choices.CASH_PAYMENT_METHODS[0][0],",
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "DiscountTax",
        "kind": 6,
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "peekOfCode": "class DiscountTax(models.Model):\n    # * for discount\n    discount = models.IntegerField(\n        null=True,\n        blank=True,\n        choices=choices.DISCOUNT_CHOICES,\n        # default=choices.DISCOUNT_CHOICES[0][0]\n    )\n    discount_percentage = models.DecimalField(\n        decimal_places=2,",
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "TreasuryPayment",
        "kind": 6,
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "peekOfCode": "class TreasuryPayment(models.Model):\n    treasury = models.ForeignKey(\n        \"treasuries.Treasury\",\n        default=\"\",\n        null=True,\n        blank=True,\n        verbose_name=_(\"Treasury Name\"),\n        # related_name=\"treasury_payment_treasury\",\n        on_delete=models.CASCADE,\n    )",
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "CreateVisa",
        "kind": 6,
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "peekOfCode": "class CreateVisa(BasicData):\n    visa_name = models.CharField(\n        max_length=100,\n        blank=True,\n        null=True,\n        verbose_name=_(\"Visa Owner Name\"),\n    )\n    expire_date = models.DateField(\n        default=now, blank=True, null=True, verbose_name=_(\"Expire Date\")\n    )",
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "CreateWallet",
        "kind": 6,
        "importPath": "apps.management.models",
        "description": "apps.management.models",
        "peekOfCode": "class CreateWallet(BasicData):\n    \"\"\"\n    For mobile wallet as(Vodafone cash, ...) and tranfer money from (PayPal, EnstaPay, ...) to your Wallet\n    \"\"\"\n    name = models.IntegerField(\n        default=0,\n        choices=PAYMENT_WALLET,\n        verbose_name=_(\"Wallet Name\"),\n    )\n    wallet_name = models.ForeignKey(",
        "detail": "apps.management.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "apps.management.urls",
        "description": "apps.management.urls",
        "peekOfCode": "app_name = \"management\"\nurlpatterns = [\n    path(\"create/new/visa/\", login_required(create_visa), name=\"create_visa\"),\n    path(\"edit/visa/id/<int:id>\", login_required(edit_visa), name=\"edit_visa\"),\n    # ------- Create Visa Urls -------\n     path(\"table/of/all/visa/\",\n          login_required(visa_table),\n          name=\"visa_table\"\n          ),\n     path(\"add/visa/\",",
        "detail": "apps.management.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.management.urls",
        "description": "apps.management.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"create/new/visa/\", login_required(create_visa), name=\"create_visa\"),\n    path(\"edit/visa/id/<int:id>\", login_required(edit_visa), name=\"edit_visa\"),\n    # ------- Create Visa Urls -------\n     path(\"table/of/all/visa/\",\n          login_required(visa_table),\n          name=\"visa_table\"\n          ),\n     path(\"add/visa/\",\n          login_required(add_visa),",
        "detail": "apps.management.urls",
        "documentation": {}
    },
    {
        "label": "create_visa",
        "kind": 2,
        "importPath": "apps.management.views",
        "description": "apps.management.views",
        "peekOfCode": "def create_visa(request):\n    pass\ndef edit_visa(request, id):\n    pass\n# def add_create_object(request):\n#     if request.method == \"POST\":\n#         form = AddCreateObjectForm(request.POST or None)\n#         if form.is_valid():\n#             for x in form:\n#                 print(x.name, x.errors)",
        "detail": "apps.management.views",
        "documentation": {}
    },
    {
        "label": "edit_visa",
        "kind": 2,
        "importPath": "apps.management.views",
        "description": "apps.management.views",
        "peekOfCode": "def edit_visa(request, id):\n    pass\n# def add_create_object(request):\n#     if request.method == \"POST\":\n#         form = AddCreateObjectForm(request.POST or None)\n#         if form.is_valid():\n#             for x in form:\n#                 print(x.name, x.errors)\n#                 print(\" -------------- Line 16 Create Object Views.py \")\n#             valid_form = form.save(commit=False)",
        "detail": "apps.management.views",
        "documentation": {}
    },
    {
        "label": "add_visa",
        "kind": 2,
        "importPath": "apps.management.visa",
        "description": "apps.management.visa",
        "peekOfCode": "def add_visa(request):\n    data = {}\n    data['visa_id'] = None \n    data['error'] = 'ERROR !!!'\n    data['type'] = 'error'\n    if request.accepts('*/*') and request.method == \"POST\":\n        form = CreateVisaForm(\n            request.POST or None, \n        )\n        for f in form:",
        "detail": "apps.management.visa",
        "documentation": {}
    },
    {
        "label": "edit_visa",
        "kind": 2,
        "importPath": "apps.management.visa",
        "description": "apps.management.visa",
        "peekOfCode": "def edit_visa(request, id):\n    data = {}\n    data['visa_id'] = id \n    data['msg'] = 'ERROR !!!'\n    data['type'] = 'error'\n    qs = CreateVisa.objects.select_related('user').get(id=id)\n    form = CreateVisaForm(\n        request.POST or None,\n        request.FILES or None, \n        instance=qs,",
        "detail": "apps.management.visa",
        "documentation": {}
    },
    {
        "label": "create_ajax_visa_message",
        "kind": 2,
        "importPath": "apps.management.visa",
        "description": "apps.management.visa",
        "peekOfCode": "def create_ajax_visa_message(request):\n    data = {}\n    data['visa_id'] = None \n    data['error'] = 'ERROR !!!'\n    data['type'] = 'error'\n    if request.is_ajax() and request.method == \"POST\":\n        form = CreateVisaForm(request.POST or None)\n        visa_name = request.POST.get(\"visa_name\") \n        match = CreateVisa.objects.select_related('user').filter(name=visa_name).exists()\n        if not match:",
        "detail": "apps.management.visa",
        "documentation": {}
    },
    {
        "label": "visa_table",
        "kind": 2,
        "importPath": "apps.management.visa",
        "description": "apps.management.visa",
        "peekOfCode": "def visa_table(request):\n    table_qs = CreateVisa.objects.select_related('user').filter(is_deleted=False, active=True).order_by('-id')\n    deleted_qs = CreateVisa.objects.select_related('user').filter(is_deleted=True,).order_by('-id')\n    inactive_qs = CreateVisa.objects.select_related('user').filter(is_deleted=False, active=False).order_by('-id')\n    combined_qs = list(chain(table_qs, inactive_qs))\n    main_qs = CreateVisa.objects.select_related('user').only().filter().order_by('-id')\n    table_total = table_qs.count()\n    deleted_total = deleted_qs.count()\n    inactive_total = inactive_qs.count()\n    main_total = main_qs.count()",
        "detail": "apps.management.visa",
        "documentation": {}
    },
    {
        "label": "add_wallet",
        "kind": 2,
        "importPath": "apps.management.wallet",
        "description": "apps.management.wallet",
        "peekOfCode": "def add_wallet(request):\n    data = {}\n    data['wallet_id'] = None \n    data['msg'] = 'ERROR !!!'\n    data['type'] = 'error'\n    if request.accepts('*/*') and request.method == \"POST\":\n        form = CreateWalletForm(\n            request.POST or None, \n        )\n        for f in form:",
        "detail": "apps.management.wallet",
        "documentation": {}
    },
    {
        "label": "edit_wallet",
        "kind": 2,
        "importPath": "apps.management.wallet",
        "description": "apps.management.wallet",
        "peekOfCode": "def edit_wallet(request, id):\n    data = {}\n    data['wallet_id'] = id \n    data['msg'] = 'ERROR !!!'\n    data['type'] = 'error'\n    qs = CreateWallet.objects.select_related('user').get(id=id)\n    form = CreateWalletForm(\n        request.POST or None,\n        request.FILES or None, \n        instance=qs,",
        "detail": "apps.management.wallet",
        "documentation": {}
    },
    {
        "label": "wallet_table",
        "kind": 2,
        "importPath": "apps.management.wallet",
        "description": "apps.management.wallet",
        "peekOfCode": "def wallet_table(request):\n    table_qs = CreateWallet.objects.select_related('user').filter(is_deleted=False,active=True).order_by('-id')\n    mobile_qs = CreateWallet.objects.values().filter(is_deleted=False).exclude(mobile='').exclude(mobile=None).order_by('-id')\n    account_qs = CreateWallet.objects.values().filter(is_deleted=False).exclude(account_name='').exclude(account_name=None).order_by('-id')\n    inactive_qs = CreateWallet.objects.select_related('user').filter(is_deleted=False, active=False).order_by('-id')\n    deleted_qs = CreateWallet.objects.select_related('user').filter(is_deleted=True,).order_by('-id')\n    main_qs = CreateWallet.objects.select_related('user').only().filter().order_by('-id')\n    combined_qs = list(chain(table_qs, inactive_qs))\n    table_total = table_qs.count()\n    mobile_total = mobile_qs.count()",
        "detail": "apps.management.wallet",
        "documentation": {}
    },
    {
        "label": "add_wallet_name",
        "kind": 2,
        "importPath": "apps.management.wallet_name",
        "description": "apps.management.wallet_name",
        "peekOfCode": "def add_wallet_name(request):\n    data = {}\n    data['wallet_name_id'] = None \n    data['error'] = 'ERROR !!!'\n    data['type'] = 'error'\n    if request.accepts('*/*') and request.method == \"POST\":\n        form = WalletNameForm(\n            request.POST or None, \n        )\n        for f in form:",
        "detail": "apps.management.wallet_name",
        "documentation": {}
    },
    {
        "label": "edit_wallet_name",
        "kind": 2,
        "importPath": "apps.management.wallet_name",
        "description": "apps.management.wallet_name",
        "peekOfCode": "def edit_wallet_name(request, id):\n    data = {}\n    # data['branches_id'] = id \n    # data['error'] = 'ERROR !!!'\n    # data['type'] = 'error'\n    qs = WalletName.objects.select_related('user').get(id=id)\n    form = WalletNameForm(\n        request.POST or None,\n        request.FILES or None, \n        instance=qs,",
        "detail": "apps.management.wallet_name",
        "documentation": {}
    },
    {
        "label": "create_ajax_wallet_message",
        "kind": 2,
        "importPath": "apps.management.wallet_name",
        "description": "apps.management.wallet_name",
        "peekOfCode": "def create_ajax_wallet_message(request):\n    data = {}\n    data['wallet_name_id'] = None \n    data['error'] = 'ERROR !!!'\n    data['type'] = 'error'\n    if request.is_ajax() and request.method == \"POST\":\n        form = WalletNameForm(request.POST or None)\n        wallet_name = request.POST.get(\"wallet_name\") \n        match = WalletName.objects.select_related('user').filter(name=wallet_name).exists()\n        if not match:",
        "detail": "apps.management.wallet_name",
        "documentation": {}
    },
    {
        "label": "wallet_name_table",
        "kind": 2,
        "importPath": "apps.management.wallet_name",
        "description": "apps.management.wallet_name",
        "peekOfCode": "def wallet_name_table(request):\n    # table_qs = Branches.objects.select_related('user').only().order_by('-id')\n    #?--Esraa--\n    active_qs = WalletName.objects.select_related('user').filter(is_deleted=False, active=True).order_by('-id')\n    inactive_qs = WalletName.objects.select_related('user').filter(is_deleted=False, active=False).order_by('-id')\n    deleted_qs = WalletName.objects.select_related('user').filter(is_deleted=True).order_by('-id')\n    main_qs = WalletName.objects.select_related('user').filter(is_deleted=False).order_by('-id')\n    table_qs = WalletName.objects.select_related('user').filter(is_deleted=False , active=True).order_by('-id')\n    combined_qs = list(chain(table_qs, inactive_qs))\n    active_total = active_qs.count()",
        "detail": "apps.management.wallet_name",
        "documentation": {}
    },
    {
        "label": "PagesConfig",
        "kind": 6,
        "importPath": "apps.pages.apps",
        "description": "apps.pages.apps",
        "peekOfCode": "class PagesConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.pages\"",
        "detail": "apps.pages.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.pages.urls",
        "description": "apps.pages.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"pages/account_settings/account/\",\n        PagesView.as_view(template_name=\"pages_account_settings_account.html\"),\n        name=\"pages-account-settings-account\",\n    ),\n    path(\n        \"pages/account_settings/notifications/\",\n        PagesView.as_view(template_name=\"pages_account_settings_notifications.html\"),\n        name=\"pages-account-settings-notifications\",",
        "detail": "apps.pages.urls",
        "documentation": {}
    },
    {
        "label": "PagesView",
        "kind": 6,
        "importPath": "apps.pages.views",
        "description": "apps.pages.views",
        "peekOfCode": "class PagesView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        return context",
        "detail": "apps.pages.views",
        "documentation": {}
    },
    {
        "label": "MiscPagesView",
        "kind": 6,
        "importPath": "apps.pages.views_misc",
        "description": "apps.pages.views_misc",
        "peekOfCode": "class MiscPagesView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        # Update the context\n        context.update(\n            {\n                \"layout_path\": TemplateHelper.set_layout(\"layout_blank.html\", context),\n            }",
        "detail": "apps.pages.views_misc",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.pasthistory.migrations.0001_initial",
        "description": "apps.pasthistory.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patientdata', '0002_alter_patients_mobile_alter_patients_name'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PastHistory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "apps.pasthistory.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PasthistoryConfig",
        "kind": 6,
        "importPath": "apps.pasthistory.apps",
        "description": "apps.pasthistory.apps",
        "peekOfCode": "class PasthistoryConfig(AppConfig):\n    name = 'apps.pasthistory'",
        "detail": "apps.pasthistory.apps",
        "documentation": {}
    },
    {
        "label": "PastHistoryForm",
        "kind": 6,
        "importPath": "apps.pasthistory.forms",
        "description": "apps.pasthistory.forms",
        "peekOfCode": "class PastHistoryForm(forms.ModelForm):\n    histdate = forms.DateField(\n        required=True,\n        label='History Date',\n        widget=forms.TextInput(attrs={\n                'class': 'form-control',\n                'id': 'histdate',\n                'type': 'date',\n                'value': date.today(),\n            }))",
        "detail": "apps.pasthistory.forms",
        "documentation": {}
    },
    {
        "label": "PastHistory",
        "kind": 6,
        "importPath": "apps.pasthistory.models",
        "description": "apps.pasthistory.models",
        "peekOfCode": "class PastHistory(models.Model):\n    pasthist = models.CharField(max_length=150, null=True, blank=True)\n    histdate = models.DateField(default=date.today, blank=True, null=True)\n    remarknote = models.CharField(max_length=1000, blank=True, null=True)\n    patient = models.ForeignKey(Patients, null=True, blank=True, on_delete=models.CASCADE)\n    def __str__(self):\n        return \"{}\".format(self.id)\n# class DrugHistory(models.Model):\n#     drug = models.CharField(max_length=150, null=True, blank=True)\n#     patient = models.ForeignKey(Patients,",
        "detail": "apps.pasthistory.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.pasthistory.urls",
        "description": "apps.pasthistory.urls",
        "peekOfCode": "urlpatterns = [\n   # add past history\n    path('create/past/history/patient/<int:patient_id>/', \n        save_pasthist, \n        name='save_pasthist'),\n    #\n    path('past/history/patient/<int:patient_id>/edit/<int:id>/', \n        edit_pasthist, \n        name='edit_pasthist'),\n    #",
        "detail": "apps.pasthistory.urls",
        "documentation": {}
    },
    {
        "label": "save_pasthist",
        "kind": 2,
        "importPath": "apps.pasthistory.views",
        "description": "apps.pasthistory.views",
        "peekOfCode": "def save_pasthist(request, patient_id):\n    patient = Patients.objects.get(id=patient_id)\n    patientid = Patients.objects.values(\"id\").filter(id=patient_id).first()\n    pat_id = patientid[\"id\"]\n    query = PastHistory.objects.filter(patient=patient_id).order_by(\"-histdate\")\n    table = PastHistoryTable(query, exclude=\"add, patient\")\n    bound_form = PastHistoryForm(data={\"patient\": patient})  # (instance=patient)\n    if request.method == \"POST\":\n        form = PastHistoryForm(request.POST or None)\n        if form.is_valid():",
        "detail": "apps.pasthistory.views",
        "documentation": {}
    },
    {
        "label": "edit_pasthist",
        "kind": 2,
        "importPath": "apps.pasthistory.views",
        "description": "apps.pasthistory.views",
        "peekOfCode": "def edit_pasthist(request, patient_id, id):\n    patient = Patients.objects.get(id=patient_id)\n    patientid = Patients.objects.values(\"id\").filter(id=patient_id).first()\n    pat_id = patientid[\"id\"]\n    query = PastHistory.objects.filter(patient=patient).order_by(\"-histdate\")\n    table = PastHistoryTable(query, exclude=\"add, patient\")\n    table.paginate(page=request.GET.get(\"page\", 1), per_page=10)\n    pasthist = PastHistory.objects.get(id=id)\n    form = PastHistoryForm(request.POST or None, instance=pasthist)\n    if form.is_valid():",
        "detail": "apps.pasthistory.views",
        "documentation": {}
    },
    {
        "label": "pasthist_table",
        "kind": 2,
        "importPath": "apps.pasthistory.views",
        "description": "apps.pasthistory.views",
        "peekOfCode": "def pasthist_table(request):  # all past history record\n    var = Patients.objects.all()\n    # var = PastHistory.objects.values('patient', 'histdate', 'pasthist').distinct()\n    # var = PastHistory.objects.select_related('patient').distinct().order_by('-id')\n    page_no = request.GET.get(\"pageno\")\n    if page_no == None or page_no == \"\" or int(page_no) == 0:\n        table = PatientsTable(var, exclude=\"addr, age, birth, tele, mob\")\n        table.paginate(page=request.GET.get(\"page\", 1), per_page=25)\n    else:\n        table = PatientsTable(var, exclude=\"addr, age, birth, tele, mob\")",
        "detail": "apps.pasthistory.views",
        "documentation": {}
    },
    {
        "label": "delete_pasthist",
        "kind": 2,
        "importPath": "apps.pasthistory.views",
        "description": "apps.pasthistory.views",
        "peekOfCode": "def delete_pasthist(request, id):\n    query = PastHistory.objects.get(id=id)\n    pat = PastHistory.objects.values(\"patient_id\").filter(id=id).first()\n    patid = pat[\"patient_id\"]\n    query.delete()\n    return redirect(reverse(\"pasthistory:save_pasthist\", kwargs={\"patient_id\": patid}))",
        "detail": "apps.pasthistory.views",
        "documentation": {}
    },
    {
        "label": "PatientsForm",
        "kind": 6,
        "importPath": "apps.patientdata.forms.patients_form",
        "description": "apps.patientdata.forms.patients_form",
        "peekOfCode": "class PatientsForm(forms.ModelForm):\n    name = forms.CharField(\n        required=True,\n        widget=forms.TextInput(),\n    )\n    address = forms.CharField(\n        required=False,\n        # validators=[validate_none(\"\")],\n        widget=forms.TextInput(),\n    )",
        "detail": "apps.patientdata.forms.patients_form",
        "documentation": {}
    },
    {
        "label": "validate_none",
        "kind": 2,
        "importPath": "apps.patientdata.forms.patients_form",
        "description": "apps.patientdata.forms.patients_form",
        "peekOfCode": "def validate_none(value):\n    if value is None:\n        raise ValidationError(\n            _(\"%(value)s must be not NONE\"),\n            params={\"value\": \"0\"},\n        )\n# you will write your class forms to be appear to the users\nclass PatientsForm(forms.ModelForm):\n    name = forms.CharField(\n        required=True,",
        "detail": "apps.patientdata.forms.patients_form",
        "documentation": {}
    },
    {
        "label": "ReservationsForm",
        "kind": 6,
        "importPath": "apps.patientdata.forms.reservations_form",
        "description": "apps.patientdata.forms.reservations_form",
        "peekOfCode": "class ReservationsForm(forms.ModelForm):\n    start_date = forms.DateTimeField(\n        required=True,\n        widget=forms.TextInput(),\n    )\n    class Meta:\n        model = PatientReservation\n        fields = [\n            \"start_date\",\n            # \"addres\",",
        "detail": "apps.patientdata.forms.reservations_form",
        "documentation": {}
    },
    {
        "label": "validate_none",
        "kind": 2,
        "importPath": "apps.patientdata.forms.reservations_form",
        "description": "apps.patientdata.forms.reservations_form",
        "peekOfCode": "def validate_none(value):\n    if value is None:\n        raise ValidationError(\n            _(\"%(value)s must be not NONE\"),\n            params={\"value\": \"0\"},\n        )\n# you will write your class forms to be appear to the users\nclass ReservationsForm(forms.ModelForm):\n    start_date = forms.DateTimeField(\n        required=True,",
        "detail": "apps.patientdata.forms.reservations_form",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.patientdata.migrations.0001_initial",
        "description": "apps.patientdata.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Patients',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=150)),",
        "detail": "apps.patientdata.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.patientdata.migrations.0002_alter_patients_mobile_alter_patients_name",
        "description": "apps.patientdata.migrations.0002_alter_patients_mobile_alter_patients_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('patientdata', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='patients',\n            name='mobile',\n            field=models.CharField(blank=True, max_length=30, null=True),\n        ),",
        "detail": "apps.patientdata.migrations.0002_alter_patients_mobile_alter_patients_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.patientdata.migrations.0003_alter_patients_options_alter_patients_barcode_and_more",
        "description": "apps.patientdata.migrations.0003_alter_patients_options_alter_patients_barcode_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('patientdata', '0002_alter_patients_mobile_alter_patients_name'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='patients',\n            options={'verbose_name': 'patients', 'verbose_name_plural': 'Patients'},\n        ),\n        migrations.AlterField(",
        "detail": "apps.patientdata.migrations.0003_alter_patients_options_alter_patients_barcode_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.patientdata.migrations.0004_alter_patients_barcode",
        "description": "apps.patientdata.migrations.0004_alter_patients_barcode",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('patientdata', '0003_alter_patients_options_alter_patients_barcode_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='patients',\n            name='barcode',\n            field=models.CharField(blank=True, max_length=20, null=True),\n        ),",
        "detail": "apps.patientdata.migrations.0004_alter_patients_barcode",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.patientdata.migrations.0005_patientreservation",
        "description": "apps.patientdata.migrations.0005_patientreservation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('patientdata', '0004_alter_patients_barcode'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PatientReservation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('active', models.BooleanField(default=False, verbose_name='Active')),",
        "detail": "apps.patientdata.migrations.0005_patientreservation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.patientdata.migrations.0006_patientreservation_user",
        "description": "apps.patientdata.migrations.0006_patientreservation_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('patientdata', '0005_patientreservation'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='patientreservation',\n            name='user',\n            field=models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),",
        "detail": "apps.patientdata.migrations.0006_patientreservation_user",
        "documentation": {}
    },
    {
        "label": "Patients",
        "kind": 6,
        "importPath": "apps.patientdata.models.patients_models",
        "description": "apps.patientdata.models.patients_models",
        "peekOfCode": "class Patients(models.Model):\n    name = models.CharField(max_length=200, unique=True)\n    address = models.CharField(max_length=150, blank=True, null=True)\n    birth_date = models.DateField(default=now, blank=True, null=True)\n    age = models.CharField(max_length=150, blank=True, null=True)\n    phone = models.CharField(max_length=150, blank=True, null=True)\n    mobile = models.CharField(max_length=30, blank=True, null=True)\n    cardid = models.CharField(max_length=20, blank=True, null=True)\n    barcode = models.CharField(max_length=20, blank=True, null=True)\n    barurl = models.CharField(max_length=80, blank=True, null=True)",
        "detail": "apps.patientdata.models.patients_models",
        "documentation": {}
    },
    {
        "label": "get_filename_ext",
        "kind": 2,
        "importPath": "apps.patientdata.models.patients_models",
        "description": "apps.patientdata.models.patients_models",
        "peekOfCode": "def get_filename_ext(filepath):\n    base_name = os.path.basename(filepath)\n    name, ext = os.path.splitext(base_name)\n    return name, ext\ndef upload_image_path(instance, filename):\n    new_filename = random.randint(1, 3910209312)\n    name, ext = get_filename_ext(filename)\n    final_filename = \"{new_filename}{ext}\".format(new_filename=new_filename, ext=ext)\n    return \"patients/{new_filename}/{final_filename}\".format(\n        new_filename=new_filename, final_filename=final_filename",
        "detail": "apps.patientdata.models.patients_models",
        "documentation": {}
    },
    {
        "label": "upload_image_path",
        "kind": 2,
        "importPath": "apps.patientdata.models.patients_models",
        "description": "apps.patientdata.models.patients_models",
        "peekOfCode": "def upload_image_path(instance, filename):\n    new_filename = random.randint(1, 3910209312)\n    name, ext = get_filename_ext(filename)\n    final_filename = \"{new_filename}{ext}\".format(new_filename=new_filename, ext=ext)\n    return \"patients/{new_filename}/{final_filename}\".format(\n        new_filename=new_filename, final_filename=final_filename\n    )\n# Create your models here.\nclass Patients(models.Model):\n    name = models.CharField(max_length=200, unique=True)",
        "detail": "apps.patientdata.models.patients_models",
        "documentation": {}
    },
    {
        "label": "current",
        "kind": 5,
        "importPath": "apps.patientdata.models.patients_models",
        "description": "apps.patientdata.models.patients_models",
        "peekOfCode": "current = timezone.now\ndef get_filename_ext(filepath):\n    base_name = os.path.basename(filepath)\n    name, ext = os.path.splitext(base_name)\n    return name, ext\ndef upload_image_path(instance, filename):\n    new_filename = random.randint(1, 3910209312)\n    name, ext = get_filename_ext(filename)\n    final_filename = \"{new_filename}{ext}\".format(new_filename=new_filename, ext=ext)\n    return \"patients/{new_filename}/{final_filename}\".format(",
        "detail": "apps.patientdata.models.patients_models",
        "documentation": {}
    },
    {
        "label": "PatientReservation",
        "kind": 6,
        "importPath": "apps.patientdata.models.reservations_models",
        "description": "apps.patientdata.models.reservations_models",
        "peekOfCode": "class PatientReservation(BasicData):\n    patient = models.ForeignKey(\n        \"patientdata.Patients\",\n        related_name=\"patient_reservation_of_patient\",\n        related_query_name=\"patient\",\n        on_delete=models.CASCADE,\n    )\n    start_date = models.DateTimeField(default=now, blank=True, null=True)\n    end_date = models.DateTimeField(blank=True, null=True)\n    notes = models.TextField(blank=True, null=True)",
        "detail": "apps.patientdata.models.reservations_models",
        "documentation": {}
    },
    {
        "label": "get_filename_ext",
        "kind": 2,
        "importPath": "apps.patientdata.models.reservations_models",
        "description": "apps.patientdata.models.reservations_models",
        "peekOfCode": "def get_filename_ext(filepath):\n    base_name = os.path.basename(filepath)\n    name, ext = os.path.splitext(base_name)\n    return name, ext\n# def upload_image_path(instance, filename):\n#     new_filename = random.randint(1, 3910209312)\n#     name, ext = get_filename_ext(filename)\n#     final_filename = \"{new_filename}{ext}\".format(new_filename=new_filename, ext=ext)\n#     return \"patients/{new_filename}/{final_filename}\".format(\n#         new_filename=new_filename, final_filename=final_filename",
        "detail": "apps.patientdata.models.reservations_models",
        "documentation": {}
    },
    {
        "label": "PatientView",
        "kind": 6,
        "importPath": "apps.patientdata.views.patients",
        "description": "apps.patientdata.views.patients",
        "peekOfCode": "class PatientView(CreateView):  # (TemplateView):\n    template_name = \"save_patient.html\"\n    form_class = PatientsForm\n    queryset = Patients.objects.only()[:100]\n    success_url = reverse_lazy(\"patientdata:save-patient\")\n    def post(self, request, *args, **kwargs):\n        \"\"\"\n        Handle POST requests: instantiate a form instance with the passed\n        POST variables and then check if it's valid.\n        \"\"\"",
        "detail": "apps.patientdata.views.patients",
        "documentation": {}
    },
    {
        "label": "PatientUpdateView",
        "kind": 6,
        "importPath": "apps.patientdata.views.patients",
        "description": "apps.patientdata.views.patients",
        "peekOfCode": "class PatientUpdateView(UpdateView):\n    model = Patients\n    template_name = \"edit_patient.html\"\n    pk_url_kwarg = \"patient_id\"\n    queryset = Patients.objects.all()\n    form_class = PatientsForm\n    template_name_suffix = \"_update_form\"\n    success_url = reverse_lazy(\"patientdata:edit-patient\")\n    def form_invalid(self, form):\n        \"\"\"If the form is invalid, render the invalid form.\"\"\"",
        "detail": "apps.patientdata.views.patients",
        "documentation": {}
    },
    {
        "label": "PatientListView",
        "kind": 6,
        "importPath": "apps.patientdata.views.patients",
        "description": "apps.patientdata.views.patients",
        "peekOfCode": "class PatientListView(ListView):\n    \"\"\"\n    for patient-table, patient-cards and search patients in patient cards\n    \"\"\"\n    model = Patients\n    # context_object_name = \"\"\n    template_name = \"patients_cards/patient_card.html\"\n    queryset = Patients.objects.only().order_by(\"-id\")  # [:100]\n    # def get(self, request, *args, **kwargs):\n    #     patient_search = request.GET.get(\"pat\")",
        "detail": "apps.patientdata.views.patients",
        "documentation": {}
    },
    {
        "label": "ReservationsView",
        "kind": 6,
        "importPath": "apps.patientdata.views.reservations",
        "description": "apps.patientdata.views.reservations",
        "peekOfCode": "class ReservationsView(CreateView):  # (TemplateView):\n    template_name = \"reservations/reservations.html\"\n    form_class = ReservationsForm\n    queryset = PatientReservation.objects.only()[:100]\n    success_url = reverse_lazy(\"patientdata:reservations\")\n    def post(self, request, *args, **kwargs):\n        \"\"\"\n        Handle POST requests: instantiate a form instance with the passed\n        POST variables and then check if it's valid.\n        \"\"\"",
        "detail": "apps.patientdata.views.reservations",
        "documentation": {}
    },
    {
        "label": "PatientUpdateView",
        "kind": 6,
        "importPath": "apps.patientdata.views.reservations",
        "description": "apps.patientdata.views.reservations",
        "peekOfCode": "class PatientUpdateView(UpdateView):\n    model = Patients\n    template_name = \"edit_patient.html\"\n    pk_url_kwarg = \"patient_id\"\n    queryset = Patients.objects.all()\n    form_class = PatientsForm\n    template_name_suffix = \"_update_form\"\n    success_url = reverse_lazy(\"patientdata:edit-patient\")\n    def form_invalid(self, form):\n        \"\"\"If the form is invalid, render the invalid form.\"\"\"",
        "detail": "apps.patientdata.views.reservations",
        "documentation": {}
    },
    {
        "label": "PatientsAdmin",
        "kind": 6,
        "importPath": "apps.patientdata.admin",
        "description": "apps.patientdata.admin",
        "peekOfCode": "class PatientsAdmin(admin.ModelAdmin):\n    pass",
        "detail": "apps.patientdata.admin",
        "documentation": {}
    },
    {
        "label": "PatientdataConfig",
        "kind": 6,
        "importPath": "apps.patientdata.apps",
        "description": "apps.patientdata.apps",
        "peekOfCode": "class PatientdataConfig(AppConfig):\n    name = 'apps.patientdata'",
        "detail": "apps.patientdata.apps",
        "documentation": {}
    },
    {
        "label": "PatientsForm",
        "kind": 6,
        "importPath": "apps.patientdata.forms_old",
        "description": "apps.patientdata.forms_old",
        "peekOfCode": "class PatientsForm(forms.ModelForm):\n    # id = forms.IntegerField(\n    #     required=False,\n    #     label=\"Patient ID\",\n    #     widget=forms.NumberInput(\n    #         attrs={\n    #             \"class\": \"form-control\",\n    #             \"readonly\": \"readonly\",\n    #         }\n    #     ),",
        "detail": "apps.patientdata.forms_old",
        "documentation": {}
    },
    {
        "label": "validate_none",
        "kind": 2,
        "importPath": "apps.patientdata.forms_old",
        "description": "apps.patientdata.forms_old",
        "peekOfCode": "def validate_none(value):\n    if value is None:\n        raise ValidationError(\n            _(\"%(value)s must be not NONE\"),\n            params={\"value\": \"0\"},\n        )\n# you will write your class forms to be appear to the users\nclass PatientsForm(forms.ModelForm):\n    # id = forms.IntegerField(\n    #     required=False,",
        "detail": "apps.patientdata.forms_old",
        "documentation": {}
    },
    {
        "label": "Patients",
        "kind": 6,
        "importPath": "apps.patientdata.models_old",
        "description": "apps.patientdata.models_old",
        "peekOfCode": "class Patients(models.Model):\n    name = models.CharField(max_length=200, unique=True)\n    address = models.CharField(max_length=150, blank=True, null=True)\n    birth_date = models.DateField(default=now, blank=True, null=True)\n    age = models.CharField(max_length=150, blank=True, null=True)\n    phone = models.CharField(max_length=150, blank=True, null=True)\n    mobile = models.CharField(max_length=30, blank=True, null=True)\n    cardid = models.CharField(max_length=20, blank=True, null=True)\n    barcode = models.CharField(max_length=20, blank=True, null=True)\n    barurl = models.CharField(max_length=80, blank=True, null=True)",
        "detail": "apps.patientdata.models_old",
        "documentation": {}
    },
    {
        "label": "get_filename_ext",
        "kind": 2,
        "importPath": "apps.patientdata.models_old",
        "description": "apps.patientdata.models_old",
        "peekOfCode": "def get_filename_ext(filepath):\n    base_name = os.path.basename(filepath)\n    name, ext = os.path.splitext(base_name)\n    return name, ext\ndef upload_image_path(instance, filename):\n    new_filename = random.randint(1, 3910209312)\n    name, ext = get_filename_ext(filename)\n    final_filename = \"{new_filename}{ext}\".format(new_filename=new_filename, ext=ext)\n    return \"patients/{new_filename}/{final_filename}\".format(\n        new_filename=new_filename, final_filename=final_filename",
        "detail": "apps.patientdata.models_old",
        "documentation": {}
    },
    {
        "label": "upload_image_path",
        "kind": 2,
        "importPath": "apps.patientdata.models_old",
        "description": "apps.patientdata.models_old",
        "peekOfCode": "def upload_image_path(instance, filename):\n    new_filename = random.randint(1, 3910209312)\n    name, ext = get_filename_ext(filename)\n    final_filename = \"{new_filename}{ext}\".format(new_filename=new_filename, ext=ext)\n    return \"patients/{new_filename}/{final_filename}\".format(\n        new_filename=new_filename, final_filename=final_filename\n    )\n# Create your models here.\nclass Patients(models.Model):\n    name = models.CharField(max_length=200, unique=True)",
        "detail": "apps.patientdata.models_old",
        "documentation": {}
    },
    {
        "label": "current",
        "kind": 5,
        "importPath": "apps.patientdata.models_old",
        "description": "apps.patientdata.models_old",
        "peekOfCode": "current = timezone.now\ndef get_filename_ext(filepath):\n    base_name = os.path.basename(filepath)\n    name, ext = os.path.splitext(base_name)\n    return name, ext\ndef upload_image_path(instance, filename):\n    new_filename = random.randint(1, 3910209312)\n    name, ext = get_filename_ext(filename)\n    final_filename = \"{new_filename}{ext}\".format(new_filename=new_filename, ext=ext)\n    return \"patients/{new_filename}/{final_filename}\".format(",
        "detail": "apps.patientdata.models_old",
        "documentation": {}
    },
    {
        "label": "render_footer",
        "kind": 2,
        "importPath": "apps.patientdata.tables",
        "description": "apps.patientdata.tables",
        "peekOfCode": "def render_footer(bound_column, table):\n    # for row in table.data:\n    #     s = sum(bound_column.accessor.resolve(row))\n    return sum(bound_column.accessor.resolve(row) for row in table.data)\n    # s = sum(bound_column.accessor.resolve(row) for row in table.data)\n    # return s\ndef countrow(table):\n    return len(table.rows)\n# class BillsColumn(tables.Column):\n#     column_total = 0",
        "detail": "apps.patientdata.tables",
        "documentation": {}
    },
    {
        "label": "countrow",
        "kind": 2,
        "importPath": "apps.patientdata.tables",
        "description": "apps.patientdata.tables",
        "peekOfCode": "def countrow(table):\n    return len(table.rows)\n# class BillsColumn(tables.Column):\n#     column_total = 0\n#     def render(self, record):\n#         bills = record.certificatebills.all()\n#         total_bill = 0\n#         for bill in bills:\n#             total_bill += bill.bill_amount\n#         # accumulate",
        "detail": "apps.patientdata.tables",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "apps.patientdata.urls",
        "description": "apps.patientdata.urls",
        "peekOfCode": "app_name = \"patientdata\"\nurlpatterns = [\n    # ? CBV\n    path(\n        \"add/new/patient/\",\n        views.PatientView.as_view(),  # (template_name=\"save_patient.html\"),\n        name=\"save-patient\",\n    ),\n    path(\n        \"reservation/area/\",",
        "detail": "apps.patientdata.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.patientdata.urls",
        "description": "apps.patientdata.urls",
        "peekOfCode": "urlpatterns = [\n    # ? CBV\n    path(\n        \"add/new/patient/\",\n        views.PatientView.as_view(),  # (template_name=\"save_patient.html\"),\n        name=\"save-patient\",\n    ),\n    path(\n        \"reservation/area/\",\n        views.PatientView.as_view(",
        "detail": "apps.patientdata.urls",
        "documentation": {}
    },
    {
        "label": "PatientView",
        "kind": 6,
        "importPath": "apps.patientdata.views_old",
        "description": "apps.patientdata.views_old",
        "peekOfCode": "class PatientView(CreateView):  # (TemplateView):\n    template_name = \"save_patient.html\"\n    form_class = PatientsForm\n    queryset = Patients.objects.only()[:100]\n    success_url = reverse_lazy(\"patientdata:save-patient\")\n    def post(self, request, *args, **kwargs):\n        \"\"\"\n        Handle POST requests: instantiate a form instance with the passed\n        POST variables and then check if it's valid.\n        \"\"\"",
        "detail": "apps.patientdata.views_old",
        "documentation": {}
    },
    {
        "label": "PatientUpdateView",
        "kind": 6,
        "importPath": "apps.patientdata.views_old",
        "description": "apps.patientdata.views_old",
        "peekOfCode": "class PatientUpdateView(UpdateView):\n    model = Patients\n    template_name = \"edit_patient.html\"\n    pk_url_kwarg = \"patient_id\"\n    queryset = Patients.objects.all()\n    form_class = PatientsForm\n    template_name_suffix = \"_update_form\"\n    success_url = reverse_lazy(\"patientdata:edit-patient\")\n    def form_invalid(self, form):\n        \"\"\"If the form is invalid, render the invalid form.\"\"\"",
        "detail": "apps.patientdata.views_old",
        "documentation": {}
    },
    {
        "label": "PatientListView",
        "kind": 6,
        "importPath": "apps.patientdata.views_old",
        "description": "apps.patientdata.views_old",
        "peekOfCode": "class PatientListView(ListView):\n    \"\"\"\n    for patient-table, patient-cards and search patients in patient cards\n    \"\"\"\n    model = Patients\n    # context_object_name = \"\"\n    template_name = \"patients_cards/patient_card.html\"\n    queryset = Patients.objects.only().order_by(\"-id\")  # [:100]\n    # def get(self, request, *args, **kwargs):\n    #     patient_search = request.GET.get(\"pat\")",
        "detail": "apps.patientdata.views_old",
        "documentation": {}
    },
    {
        "label": "save_patient",
        "kind": 2,
        "importPath": "apps.patientdata.views_old",
        "description": "apps.patientdata.views_old",
        "peekOfCode": "def save_patient(request):\n    \"\"\"Collecting data for patients function to save patient data to database\"\"\"\n    if request.method == \"POST\":\n        form = PatientsForm(request.POST or None, request.FILES or None)\n        if form.is_valid():\n            barcode_value = request.POST.get(\"barurl\")\n            if barcode_value is None or barcode_value == \"\":\n                messages.success(request, \"Create barcode without value is not valid\")\n            elif barcode_value is not None:\n                # url = pyqrcode.create('anything')",
        "detail": "apps.patientdata.views_old",
        "documentation": {}
    },
    {
        "label": "edit_patient",
        "kind": 2,
        "importPath": "apps.patientdata.views_old",
        "description": "apps.patientdata.views_old",
        "peekOfCode": "def edit_patient(request, id):  # Making Update to a Patient\n    qs = Visits.objects.filter(patient=id).order_by(\"-id\")\n    # print('qs = '+str(qs))\n    # match_presenthist = PresentHistory.objects.filter(patient=id, visit=1).exists()\n    table = VisitsTable(qs, exclude=\"patient, addpresent\")\n    table.paginate(page=request.GET.get(\"page\", 1), per_page=10)\n    query = Patients.objects.get(id=id)  # get(birth_date=birth_date)\n    patient = Patients.objects.values(\"id\").filter(id=id).first()\n    barcode = Patients.objects.values(\"barcode\").filter(id=id).first()\n    # patient = Patients.objects.filter(id=id)",
        "detail": "apps.patientdata.views_old",
        "documentation": {}
    },
    {
        "label": "table_patient",
        "kind": 2,
        "importPath": "apps.patientdata.views_old",
        "description": "apps.patientdata.views_old",
        "peekOfCode": "def table_patient(request):\n    qs = Patients.objects.all().order_by(\"-id\")\n    # search_name = request.GET.get('patname')\n    # search_id = request.GET.get('patid')\n    # result = Patients.objects.filter(Q(name__icontains=search_name))\n    # result_id = Patients.objects.filter(Q(id=search_id))\n    page_no = request.GET.get(\"pageno\")\n    # if search_name != '':\n    #     table = PatientsTable(result)\n    #     table.paginate(page=request.GET.get(\"page\", 1), per_page=10)",
        "detail": "apps.patientdata.views_old",
        "documentation": {}
    },
    {
        "label": "patient_details",
        "kind": 2,
        "importPath": "apps.patientdata.views_old",
        "description": "apps.patientdata.views_old",
        "peekOfCode": "def patient_details(request, barcode):\n    qs = Patients.objects.get(barcode=barcode)\n    patient = Patients.objects.get(id=qs.id)\n    context = {\n        \"qs\": qs,\n    }\n    return render(request, \"patientdata/patient_details.html\", context)\ndef barcode_redirect(request, barcode):\n    qs = Patients.objects.get(barcode=barcode)\n    return redirect(reverse(\"patientdata:edit_patient\", args=(qs.id)))",
        "detail": "apps.patientdata.views_old",
        "documentation": {}
    },
    {
        "label": "barcode_redirect",
        "kind": 2,
        "importPath": "apps.patientdata.views_old",
        "description": "apps.patientdata.views_old",
        "peekOfCode": "def barcode_redirect(request, barcode):\n    qs = Patients.objects.get(barcode=barcode)\n    return redirect(reverse(\"patientdata:edit_patient\", args=(qs.id)))",
        "detail": "apps.patientdata.views_old",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.presenthistory.migrations.0001_initial",
        "description": "apps.presenthistory.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patientdata', '0002_alter_patients_mobile_alter_patients_name'),\n        ('visits', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PresentHistory',\n            fields=[",
        "detail": "apps.presenthistory.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PresenthistoryConfig",
        "kind": 6,
        "importPath": "apps.presenthistory.apps",
        "description": "apps.presenthistory.apps",
        "peekOfCode": "class PresenthistoryConfig(AppConfig):\n    name = 'apps.presenthistory'",
        "detail": "apps.presenthistory.apps",
        "documentation": {}
    },
    {
        "label": "PresentHistoryForm",
        "kind": 6,
        "importPath": "apps.presenthistory.forms",
        "description": "apps.presenthistory.forms",
        "peekOfCode": "class PresentHistoryForm(forms.ModelForm):\n    # id = forms.IntegerField(\n    #     required=False,\n    #     label='ID',\n    #     widget=forms.NumberInput(attrs={\n    #         'class': 'form-control',\n    #         'readonly': 'readonly',\n    #     }))\n    # visitdate = forms.DateField(\n    #     required=True,",
        "detail": "apps.presenthistory.forms",
        "documentation": {}
    },
    {
        "label": "PresentHistory",
        "kind": 6,
        "importPath": "apps.presenthistory.models",
        "description": "apps.presenthistory.models",
        "peekOfCode": "class PresentHistory(models.Model):\n    visitdate    = models.DateField(default=date.today, blank=True, null=True)\n    temprature = models.DecimalField(decimal_places=2,\n                                     max_digits=5,\n                                     default=00.00,\n                                     blank=True)\n    weight = models.DecimalField(decimal_places=2,\n                                 max_digits=5,\n                                 default=000.00,\n                                 blank=True)",
        "detail": "apps.presenthistory.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "apps.presenthistory.urls",
        "description": "apps.presenthistory.urls",
        "peekOfCode": "app_name = \"presenthistory\"\nurlpatterns = [\n    # Present History section\n    path('create/present/history/patient/<int:patient_id>/visit/<int:visit_id>/',\n        save_present_hist,\n        name='save_present_hist'),\n    path('present/history/patient/<int:patient_id>/visit/<int:visit_id>/edit/<int:id>/', \n        edit_present_hist, \n        name=\"edit_present_hist\"),   \n    path('present/history/table/',",
        "detail": "apps.presenthistory.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.presenthistory.urls",
        "description": "apps.presenthistory.urls",
        "peekOfCode": "urlpatterns = [\n    # Present History section\n    path('create/present/history/patient/<int:patient_id>/visit/<int:visit_id>/',\n        save_present_hist,\n        name='save_present_hist'),\n    path('present/history/patient/<int:patient_id>/visit/<int:visit_id>/edit/<int:id>/', \n        edit_present_hist, \n        name=\"edit_present_hist\"),   \n    path('present/history/table/',\n        table_present_hist,",
        "detail": "apps.presenthistory.urls",
        "documentation": {}
    },
    {
        "label": "save_present_hist",
        "kind": 2,
        "importPath": "apps.presenthistory.views",
        "description": "apps.presenthistory.views",
        "peekOfCode": "def save_present_hist(request, patient_id, visit_id):\n    visit = Visits.objects.get(id=visit_id)\n    visitdate = Visits.objects.values(\"visitdate\").filter(id=visit_id).first()\n    vis_date = visitdate[\"visitdate\"]\n    visitid = Visits.objects.values(\"id\").filter(id=visit_id).first()\n    vis_id = visitid[\"id\"]\n    patient_name = Patients.objects.get(id=patient_id)\n    patientid = Visits.objects.values(\"patient_id\").filter(patient=patient_id).first()\n    pat_id = patientid[\"patient_id\"]\n    match_visit = Medicine.objects.filter(visit=vis_id, patient=pat_id).exists()",
        "detail": "apps.presenthistory.views",
        "documentation": {}
    },
    {
        "label": "edit_present_hist",
        "kind": 2,
        "importPath": "apps.presenthistory.views",
        "description": "apps.presenthistory.views",
        "peekOfCode": "def edit_present_hist(request, patient_id, visit_id, id):\n    present = PresentHistory.objects.get(id=id)\n    visit = Visits.objects.get(id=visit_id)\n    visitdate = Visits.objects.values(\"visitdate\").filter(id=visit_id).first()\n    vis_date = visitdate[\"visitdate\"]\n    visitid = Visits.objects.values(\"id\").filter(id=visit_id).first()\n    vis_id = visitid[\"id\"]\n    patient_name = Patients.objects.get(id=patient_id)\n    patientid = Visits.objects.values(\"patient_id\").filter(patient=patient_id).first()\n    pat_id = patientid[\"patient_id\"]",
        "detail": "apps.presenthistory.views",
        "documentation": {}
    },
    {
        "label": "patient_history_table",
        "kind": 2,
        "importPath": "apps.presenthistory.views",
        "description": "apps.presenthistory.views",
        "peekOfCode": "def patient_history_table(request, patient_id):\n    \"\"\"table for specific patient already exists in PresentHistory\"\"\"\n    visit = Visits.objects.filter(patient=patient_id).order_by(\"-id\")\n    qs = PresentHistory.objects.filter(patient=patient_id).order_by(\"-id\")\n    # vis_id = Visits.objects.values('id').filter(patient=patient_id).first()\n    # visit_id = vis_id['id']\n    # patient = Patients.objects.get(id=patient_id)\n    # for obj in qs:\n    #     obj.\n    match_pat = PresentHistory.objects.filter(patient=patient_id).exists()",
        "detail": "apps.presenthistory.views",
        "documentation": {}
    },
    {
        "label": "visit_history_table",
        "kind": 2,
        "importPath": "apps.presenthistory.views",
        "description": "apps.presenthistory.views",
        "peekOfCode": "def visit_history_table(request, visit_id):\n    qs = PresentHistory.objects.filter(visit=visit_id).order_by(\"-visitdate\")\n    visit = Visits.objects.filter(id=visit_id).order_by(\"-id\")\n    match_visit = PresentHistory.objects.filter(visit=visit_id).exists()\n    if match_visit:\n        table = PresentHistoryTable(qs, show_footer=True)\n        table.paginate(page=request.GET.get(\"page\", 1), per_page=10)\n    else:\n        table = VisitsTable(visit, show_footer=False)\n        table.paginate(page=request.GET.get(\"page\", 1), per_page=10)",
        "detail": "apps.presenthistory.views",
        "documentation": {}
    },
    {
        "label": "table_add_present_hist",
        "kind": 2,
        "importPath": "apps.presenthistory.views",
        "description": "apps.presenthistory.views",
        "peekOfCode": "def table_add_present_hist(request):\n    inner_qs = PresentHistory.objects.all()\n    results = Visits.objects.exclude(presenthistory__id__in=inner_qs).order_by(\"-id\")\n    # print(results)\n    # import os, re, uuid\n    # # joins elements of getnode() after each 2 digits.\n    # # using regex expression\n    # label = os.environ.get('SERIAL')\n    # mac = ':'.join(re.findall('..', '%012x' % uuid.getnode()))\n    # if mac == label:",
        "detail": "apps.presenthistory.views",
        "documentation": {}
    },
    {
        "label": "table_present_hist",
        "kind": 2,
        "importPath": "apps.presenthistory.views",
        "description": "apps.presenthistory.views",
        "peekOfCode": "def table_present_hist(request):\n    # qs = PresentHistory.objects.select_related('visit')\n    qs = PresentHistory.objects.all().order_by(\"-id\")\n    # results = Visits.objects.filter(presenthistory__id__in=inner_qs).distinct().order_by('-id')\n    # print(qs)\n    page_no = request.GET.get(\"pageno\")\n    if page_no == None or page_no == \"\" or int(page_no) == 0:\n        table = PresentHistoryTable(qs)\n        # table = VisitsTable(results, exclude='addrevis, addpresent')\n        table.paginate(page=request.GET.get(\"page\", 1), per_page=10)",
        "detail": "apps.presenthistory.views",
        "documentation": {}
    },
    {
        "label": "delete_history",
        "kind": 2,
        "importPath": "apps.presenthistory.views",
        "description": "apps.presenthistory.views",
        "peekOfCode": "def delete_history(request, id):\n    del_hist = PresentHistory.objects.get(id=id)\n    del_hist.delete()\n    return redirect(reverse(\"presenthistory:table_present_hist\"))\n# get mac address\n# def compare(request):\n#     '''  '''\n#     import re, uuid\n#     # joins elements of getnode() after each 2 digits.\n#     # using regex expression",
        "detail": "apps.presenthistory.views",
        "documentation": {}
    },
    {
        "label": "RevisitdrugConfig",
        "kind": 6,
        "importPath": "apps.revisitdrug.apps",
        "description": "apps.revisitdrug.apps",
        "peekOfCode": "class RevisitdrugConfig(AppConfig):\n    name = 'apps.revisitdrug'",
        "detail": "apps.revisitdrug.apps",
        "documentation": {}
    },
    {
        "label": "Remedicine",
        "kind": 6,
        "importPath": "apps.revisitdrug.models",
        "description": "apps.revisitdrug.models",
        "peekOfCode": "class Remedicine(models.Model):\n    name    = models.CharField(max_length=100,\n                            null=True, blank=True, help_text=\"Add Drug Here Please ....\")\n    plan    = models.CharField(max_length=150, null=True, blank=True)\n    patient = models.ForeignKey(Patients, on_delete=models.CASCADE)\n    visit   = models.ForeignKey(Visits, null=True, blank=True, on_delete=models.CASCADE)\n    revisit = models.ForeignKey(Revisits, null=True, blank=True, on_delete=models.CASCADE)\n    def __str__(self):\n        return \"{}\".format(self.name)\n    def get_absolute_url(self):",
        "detail": "apps.revisitdrug.models",
        "documentation": {}
    },
    {
        "label": "validate_none",
        "kind": 2,
        "importPath": "apps.revisitdrug.models",
        "description": "apps.revisitdrug.models",
        "peekOfCode": "def validate_none(value):\n    if value == None:\n        raise ValidationError(_('%(value)s must be not NONE'),\n            params={'value': '0'},)\n# Sample of an ID generator - could be any string/number generator\n# For a 6-char field, this one yields 2.1 billion unique IDs\ndef id_generator(size=6, chars=ascii_uppercase + digits):\n    return ''.join(random.choice(chars) for _ in range(size))\nclass Remedicine(models.Model):\n    name    = models.CharField(max_length=100,",
        "detail": "apps.revisitdrug.models",
        "documentation": {}
    },
    {
        "label": "id_generator",
        "kind": 2,
        "importPath": "apps.revisitdrug.models",
        "description": "apps.revisitdrug.models",
        "peekOfCode": "def id_generator(size=6, chars=ascii_uppercase + digits):\n    return ''.join(random.choice(chars) for _ in range(size))\nclass Remedicine(models.Model):\n    name    = models.CharField(max_length=100,\n                            null=True, blank=True, help_text=\"Add Drug Here Please ....\")\n    plan    = models.CharField(max_length=150, null=True, blank=True)\n    patient = models.ForeignKey(Patients, on_delete=models.CASCADE)\n    visit   = models.ForeignKey(Visits, null=True, blank=True, on_delete=models.CASCADE)\n    revisit = models.ForeignKey(Revisits, null=True, blank=True, on_delete=models.CASCADE)\n    def __str__(self):",
        "detail": "apps.revisitdrug.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.revisitdrug.urls",
        "description": "apps.revisitdrug.urls",
        "peekOfCode": "urlpatterns = [\n]",
        "detail": "apps.revisitdrug.urls",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.revisits.migrations.0001_initial",
        "description": "apps.revisits.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patientdata', '0002_alter_patients_mobile_alter_patients_name'),\n        ('visits', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Revisits',\n            fields=[",
        "detail": "apps.revisits.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "RevisitsConfig",
        "kind": 6,
        "importPath": "apps.revisits.apps",
        "description": "apps.revisits.apps",
        "peekOfCode": "class RevisitsConfig(AppConfig):\n    name = 'apps.revisits'",
        "detail": "apps.revisits.apps",
        "documentation": {}
    },
    {
        "label": "RevisitsForm",
        "kind": 6,
        "importPath": "apps.revisits.forms",
        "description": "apps.revisits.forms",
        "peekOfCode": "class RevisitsForm(forms.ModelForm):\n    # id = forms.IntegerField(label='Revisit No.',\n    #                        widget=forms.NumberInput(\n    #                            attrs={\n    #                                'class': 'form-control',\n    #                                'readonly': 'readonly',\n    #                            })\n    #                        )\n    # visit = forms.ModelChoiceField(queryset=Visits.objects.all(), required=False, label='Visit No',\n    #                        widget=forms.Select(",
        "detail": "apps.revisits.forms",
        "documentation": {}
    },
    {
        "label": "validate_none",
        "kind": 2,
        "importPath": "apps.revisits.forms",
        "description": "apps.revisits.forms",
        "peekOfCode": "def validate_none(value):\n    if value == None:\n        raise ValidationError(_('%(value)s must be not NONE'),\n            params={'value': '0'},\n        )\nclass RevisitsForm(forms.ModelForm):\n    # id = forms.IntegerField(label='Revisit No.',\n    #                        widget=forms.NumberInput(\n    #                            attrs={\n    #                                'class': 'form-control',",
        "detail": "apps.revisits.forms",
        "documentation": {}
    },
    {
        "label": "Revisits",
        "kind": 6,
        "importPath": "apps.revisits.models",
        "description": "apps.revisits.models",
        "peekOfCode": "class Revisits(models.Model):\n    visitdate    = models.DateField(default=date.today, blank=True, null=True)\n    complain     = models.TextField(blank=True, null=True)\n    sign         = models.TextField(null=True, blank=True)\n    diagnosis    = models.CharField(max_length=150, null=True, blank=True)\n    intervention = models.CharField(max_length=150, null=True, blank=True)\n    amount       = models.IntegerField(default=0, blank=True)\n    patient      = models.ForeignKey(Patients, null=True, blank=True, on_delete=models.CASCADE)\n    visit        = models.ForeignKey(Visits, null=True, blank=True, on_delete=models.CASCADE)\n    def __str__(self):",
        "detail": "apps.revisits.models",
        "documentation": {}
    },
    {
        "label": "RevisitsTable",
        "kind": 6,
        "importPath": "apps.revisits.tables",
        "description": "apps.revisits.tables",
        "peekOfCode": "class RevisitsTable(tables.Table):\n    # patid = Patients.objects.get(id=)\n    # path = '<a href=\"{% url \\'revisits:edit_revisit\\' record.patient_id record.visit record.id %}\">{{ record.id }}</a>'\n    # def render_rec(self, record):\n    #     return \"{}\".format(record.patient_id)\n        # return mark_safe(''' <a href=\"{% url \\'revisits:edit_revisit\\' record.patient_id record.visit record.id %}\">%s</a> ''' % (record.patient, value))\n    id = tables.TemplateColumn(\n        '<a href=\"{% url \\'revisits:edit_revisit\\' record.id record.patient_id record.visit %}\">{{record.id}}</a>',\n        verbose_name=u'Revisit ID',)\n    visit = tables.TemplateColumn(",
        "detail": "apps.revisits.tables",
        "documentation": {}
    },
    {
        "label": "render_footer",
        "kind": 2,
        "importPath": "apps.revisits.tables",
        "description": "apps.revisits.tables",
        "peekOfCode": "def render_footer(bound_column, table):\n    # for row in table.data:\n    #     s = sum(bound_column.accessor.resolve(row))\n    return sum(bound_column.accessor.resolve(row) for row in table.data)\n    # s = sum(bound_column.accessor.resolve(row) for row in table.data)\n    # return s\ndef countrow(table):\n    return len(table.rows)\nclass RevisitsTable(tables.Table):\n    # patid = Patients.objects.get(id=)",
        "detail": "apps.revisits.tables",
        "documentation": {}
    },
    {
        "label": "countrow",
        "kind": 2,
        "importPath": "apps.revisits.tables",
        "description": "apps.revisits.tables",
        "peekOfCode": "def countrow(table):\n    return len(table.rows)\nclass RevisitsTable(tables.Table):\n    # patid = Patients.objects.get(id=)\n    # path = '<a href=\"{% url \\'revisits:edit_revisit\\' record.patient_id record.visit record.id %}\">{{ record.id }}</a>'\n    # def render_rec(self, record):\n    #     return \"{}\".format(record.patient_id)\n        # return mark_safe(''' <a href=\"{% url \\'revisits:edit_revisit\\' record.patient_id record.visit record.id %}\">%s</a> ''' % (record.patient, value))\n    id = tables.TemplateColumn(\n        '<a href=\"{% url \\'revisits:edit_revisit\\' record.id record.patient_id record.visit %}\">{{record.id}}</a>',",
        "detail": "apps.revisits.tables",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.revisits.urls",
        "description": "apps.revisits.urls",
        "peekOfCode": "urlpatterns = [\n     path('create/revisit/patient/<int:patient_id>/visit/<int:visit_id>/',\n        save_revisit,\n        name='save_revisit'),\n    #\n    path('edit/revisit/<int:id>/patient/<int:patient_id>/visit/<int:visit_id>/', \n        edit_revisit, \n        name='edit_revisit'),    \n    #\n    path('table/revisits/', ",
        "detail": "apps.revisits.urls",
        "documentation": {}
    },
    {
        "label": "save_revisit",
        "kind": 2,
        "importPath": "apps.revisits.views",
        "description": "apps.revisits.views",
        "peekOfCode": "def save_revisit(request, patient_id, visit_id): # Making save to new visits\n    patient = Patients.objects.get(id=patient_id) # out put is the patient name\n    patid = Patients.objects.values('id').filter(id=patient_id).first() # This is out put of without .first()=> <QuerySet [{'id': 36}]>\n    var = patid['id']\n    visit = Visits.objects.get(id=visit_id)\n    # visitdate = Visits.objects.values('visitdate').filter(id=visit_id).first()\n    # vis_date = visitdate['visitdate']\n    visitid = Visits.objects.values('id').filter(id=visit_id).first()\n    vis_id = visitid['id']\n    match_present = PresentHistory.objects.filter(visit=visit_id).exists()",
        "detail": "apps.revisits.views",
        "documentation": {}
    },
    {
        "label": "edit_revisit",
        "kind": 2,
        "importPath": "apps.revisits.views",
        "description": "apps.revisits.views",
        "peekOfCode": "def edit_revisit(request, patient_id, visit_id, id):\n    query = Revisits.objects.get(id=id)  # out put Revisit ID\n    qs = Revisits.objects.values('patient_id').filter(patient_id=patient_id).first() # {'patient_id': 2}\n    # for get_url() to redirect to -save present history- form\n    # test = Visits.objects.values('id', 'patient')\\\n    #                     .filter(id=id, patient=patient_id).first()  # {'id': 136, 'patient': 15}\n    # print(qs, test)\n    visit = Visits.objects.get(id=visit_id) # \n    patient = Patients.objects.get(id=patient_id) # Use it with get_absolute_url()\n    patientid = qs['patient_id'] # out put is Patient ID",
        "detail": "apps.revisits.views",
        "documentation": {}
    },
    {
        "label": "table_revisit",
        "kind": 2,
        "importPath": "apps.revisits.views",
        "description": "apps.revisits.views",
        "peekOfCode": "def table_revisit(request):\n    qs = Revisits.objects.select_related('patient', 'visit')#.order_by('id')\n    # ('-visits_visits.id') # the next lines are the result of this query ORM\n    # qs = Revisits.objects.all().order_by('-id')\n    print(qs.query)\n    page_no = request.GET.get('pageno')\n    if page_no == None or page_no == '' or int(page_no) == 0:\n        table = RevisitsTable(qs, exclude='prn')\n        table.paginate(page=request.GET.get(\"page\", 1), per_page=10)\n    else:",
        "detail": "apps.revisits.views",
        "documentation": {}
    },
    {
        "label": "view_revisit",
        "kind": 2,
        "importPath": "apps.revisits.views",
        "description": "apps.revisits.views",
        "peekOfCode": "def view_revisit(request, visit_id, patient_id):\n    visit = Visits.objects.get(id=visit_id)\n    patient = Patients.objects.get(id= patient_id)\n    qs = Revisits.objects.filter(visit=visit_id).order_by('-id')\n    table = RevisitsTable(qs, exclude='patient, visit')\n    table.paginate(page=request.GET.get(\"page\", 1), per_page=10)\n    context = {\n        'visit': visit,\n        'patient': patient,\n        'view_revisits_table': table,",
        "detail": "apps.revisits.views",
        "documentation": {}
    },
    {
        "label": "delete_revisit",
        "kind": 2,
        "importPath": "apps.revisits.views",
        "description": "apps.revisits.views",
        "peekOfCode": "def delete_revisit(request, id):\n    del_revisit = Revisits.objects.get(id=id)\n    del_revisit.delete()\n    return redirect('revisits:table_revisit')\n# def table_revisit(request):\n#     # qs = Revisits.objects.select_related('patient').order_by('-id') # the next lines are the result of this query ORM\n#     # qs = Visits.objects.all().order_by('-id')\n#     qs = Revisits.objects.all().order_by('-id')\n#     table = RevisitsTable(qs, exclude='addpresent')\n#     table.paginate(page=request.GET.get(\"page\", 1), per_page=10)",
        "detail": "apps.revisits.views",
        "documentation": {}
    },
    {
        "label": "SearchConfig",
        "kind": 6,
        "importPath": "apps.search.apps",
        "description": "apps.search.apps",
        "peekOfCode": "class SearchConfig(AppConfig):\n    name = 'apps.search'",
        "detail": "apps.search.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.search.urls",
        "description": "apps.search.urls",
        "peekOfCode": "urlpatterns = [\n    #\n    path('search/patient/', search_patient, name='search_patient'),\n    path('search/visit/', search_visit, name='search_visit'),\n    path('search/date/', search_date, name='search_date'),\n    path('search/only/date/', search_only, name='search_only'),\n    #\n    # path('income/day/<int:day>/<int:month>/<int:year>/', calculate_income, name='day_income'),\n    # path('income/month/<int:day>/<int:month>/<int:year>/', calculate_income, name='month_income'),\n    # path('income/year/<int:year>/', calculate_income, name='year_income'),",
        "detail": "apps.search.urls",
        "documentation": {}
    },
    {
        "label": "search_patient",
        "kind": 2,
        "importPath": "apps.search.views",
        "description": "apps.search.views",
        "peekOfCode": "def search_patient(request):\n    patient_search = request.GET.get('q') # represent the text input in our form\n    search_ph = request.GET.get('ph')\n    search_id = request.GET.get('pid')\n    search_card = request.GET.get('card')\n    page_no = request.GET.get('pageno')\n    if page_no == None or page_no == '' or int(page_no) == 0:\n        page_no = '10'\n    else:\n        page_no = request.GET.get('pageno')",
        "detail": "apps.search.views",
        "documentation": {}
    },
    {
        "label": "search_visit",
        "kind": 2,
        "importPath": "apps.search.views",
        "description": "apps.search.views",
        "peekOfCode": "def search_visit(request):\n    try:\n        # patient_search = request.GET.get('q') # represent the text input in our form\n        visit_search = request.GET.get('vis')      \n        if visit_search.isnumeric():\n            result_visit = Visits.objects.filter(Q(id=visit_search)).all()\n            table_search = VisitsTable(result_visit, exclude='addpresent, addrevis')\n            table_search.paginate(page=request.GET.get(\"page\", 1), per_page=5)\n        elif visit_search == None:\n            return redirect('search:search_visit')",
        "detail": "apps.search.views",
        "documentation": {}
    },
    {
        "label": "search_date",
        "kind": 2,
        "importPath": "apps.search.views",
        "description": "apps.search.views",
        "peekOfCode": "def search_date(request):\n    search_from = request.GET.get('from')\n    search_to = request.GET.get('to')\n    if (search_from) == '':\n        return redirect('search:search_date')\n    elif (search_to) == '':\n        return redirect('search:search_date')\n    elif search_from != '' and search_to != '':\n        date_search = Visits.objects.filter(Q(visitdate__range=[search_from, search_to])).all().order_by('-visitdate')\n        date_table_search = VisitsTable(date_search, exclude='addpresent, addrevis')",
        "detail": "apps.search.views",
        "documentation": {}
    },
    {
        "label": "search_only",
        "kind": 2,
        "importPath": "apps.search.views",
        "description": "apps.search.views",
        "peekOfCode": "def search_only(request): # We need to know what this function do\n    today = date.today()\n    search_day = request.GET.get('day')\n    search_month = request.GET.get('month')\n    search_year = request.GET.get('year')\n    if (search_day) == '' and (search_month) == '' and (search_year) == '':\n        return redirect('search:search_date')\n    elif search_day != '' and search_month != '' and search_year != '':\n        date_search = Visits.objects.filter(Q(visitdate__year=search_year, visitdate__month=search_month, visitdate__day=search_day)).order_by('-id')\n        date_table_search = VisitsTable(date_search, exclude='addpresent, addrevis')",
        "detail": "apps.search.views",
        "documentation": {}
    },
    {
        "label": "TablesConfig",
        "kind": 6,
        "importPath": "apps.tables.apps",
        "description": "apps.tables.apps",
        "peekOfCode": "class TablesConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.tables\"",
        "detail": "apps.tables.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.tables.urls",
        "description": "apps.tables.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"tables/basic/\",\n        TableView.as_view(template_name=\"tables_basic.html\"),\n        name=\"tables-basic\",\n    )\n]",
        "detail": "apps.tables.urls",
        "documentation": {}
    },
    {
        "label": "TableView",
        "kind": 6,
        "importPath": "apps.tables.views",
        "description": "apps.tables.views",
        "peekOfCode": "class TableView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        return context",
        "detail": "apps.tables.views",
        "documentation": {}
    },
    {
        "label": "UiConfig",
        "kind": 6,
        "importPath": "apps.ui.apps",
        "description": "apps.ui.apps",
        "peekOfCode": "class UiConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.ui\"",
        "detail": "apps.ui.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.ui.urls",
        "description": "apps.ui.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"ui/accordion/\",\n        UIView.as_view(template_name=\"ui_accordion.html\"),\n        name=\"ui-accordion\",\n    ),\n    path(\n        \"ui/alerts/\",\n        UIView.as_view(template_name=\"ui_alerts.html\"),\n        name=\"ui-alerts\",",
        "detail": "apps.ui.urls",
        "documentation": {}
    },
    {
        "label": "UIView",
        "kind": 6,
        "importPath": "apps.ui.views",
        "description": "apps.ui.views",
        "peekOfCode": "class UIView(TemplateView):\n    # Predefined function\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        return context",
        "detail": "apps.ui.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.users.migrations.0001_initial",
        "description": "apps.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CustomUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "apps.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CustomSignupView",
        "kind": 6,
        "importPath": "apps.users.adapter",
        "description": "apps.users.adapter",
        "peekOfCode": "class CustomSignupView(SignupView):\n    '''\n        We override this class to \n        Create Admin and other user types from dashboard\n    '''\n    template_name = 'account/signup.html'\n    form_class = CustomUserCreationForm\n    def form_valid(self, form):\n        next_url = self.request.META.get('HTTP_REFERER', '')\n        # next_url = (url)",
        "detail": "apps.users.adapter",
        "documentation": {}
    },
    {
        "label": "EmployeeSignupView",
        "kind": 6,
        "importPath": "apps.users.adapter",
        "description": "apps.users.adapter",
        "peekOfCode": "class EmployeeSignupView(SignupView):\n    '''\n        We override this class to \n        Create Admin and other users types from dashboard\n    '''\n    template_name = 'account/signup.html' #? important (No need to use another template \"employee_signup.html\"\n    form_class = EmployeeCreationForm\n    # redirect_field_name = 'next'\n    # view_name = \"company_signup_view\"\n    # success_url = No",
        "detail": "apps.users.adapter",
        "documentation": {}
    },
    {
        "label": "CustomAccountAdapter",
        "kind": 6,
        "importPath": "apps.users.adapter",
        "description": "apps.users.adapter",
        "peekOfCode": "class CustomAccountAdapter(DefaultAccountAdapter):\n    def is_open_for_signup(self, request):\n        \"\"\"\n        Checks whether or not the site is open for signups.\n        Next to simply returning True/False you can also intervene the\n        regular flow by raising an ImmediateHttpResponse\n        (Comment reproduced from the overridden method.)\n        \"\"\"\n        ## The next condition for make create user in dashboard from admin users  \n        if not request.user.is_authenticated: ",
        "detail": "apps.users.adapter",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "apps.users.admin",
        "description": "apps.users.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    add_form = CustomUserCreationForm\n    form = CustomUserChangeForm\n    model = CustomUser\n    # list_display = ('username', 'email', 'is_staff', 'is_active', 'mobile1', 'mobile2', 'role',)\n    # list_filter = ('username', 'email', 'is_staff', 'is_active', 'mobile1', 'mobile2', 'role',)\n    # fieldsets = (\n    #     (None, {\n    #         'fields': ('email', 'password')\n    #     }),(",
        "detail": "apps.users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "apps.users.apps",
        "description": "apps.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.users'",
        "detail": "apps.users.apps",
        "documentation": {}
    },
    {
        "label": "OWNER",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "OWNER = \"owner\"\nCLIENT = \"client\"\nADMIN = 'admin'\nVENDOR = 'vendor'\nEDITOR = 'editor'\nMANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nUSER_TYPES = (",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "CLIENT",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "CLIENT = \"client\"\nADMIN = 'admin'\nVENDOR = 'vendor'\nEDITOR = 'editor'\nMANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "ADMIN",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "ADMIN = 'admin'\nVENDOR = 'vendor'\nEDITOR = 'editor'\nMANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "VENDOR",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "VENDOR = 'vendor'\nEDITOR = 'editor'\nMANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "EDITOR",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "EDITOR = 'editor'\nMANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "MANAGER",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "MANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),\n    (EDITOR, \"Editor\"),",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "EMPLOYEE",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "EMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),\n    (EDITOR, \"Editor\"),\n    (VENDOR, \"Vendor\"),",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "REPRESENTATIVE",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "REPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),\n    (EDITOR, \"Editor\"),\n    (VENDOR, \"Vendor\"),\n    (CLIENT, \"Client\"),",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "DRIVER",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "DRIVER = 'driver'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),\n    (EDITOR, \"Editor\"),\n    (VENDOR, \"Vendor\"),\n    (CLIENT, \"Client\"),\n    (REPRESENTATIVE, \"Representative\"),",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "USER_TYPES",
        "kind": 5,
        "importPath": "apps.users.choices",
        "description": "apps.users.choices",
        "peekOfCode": "USER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),\n    (EDITOR, \"Editor\"),\n    (VENDOR, \"Vendor\"),\n    (CLIENT, \"Client\"),\n    (REPRESENTATIVE, \"Representative\"),\n    (DRIVER, \"Driver\"),",
        "detail": "apps.users.choices",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "apps.users.forms",
        "description": "apps.users.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    CHOICES = (\n        (\"\", \"--Select Role--\"),\n        (\"owner\", \"Owner\"),\n        # ('admin', \"Admin\"),\n        (\"manager\", \"Manager\"),\n        (\"employee\", \"Employee\"),\n        # for later\n        (\"vendor\", \"Vendor\"),\n        (\"client\", \"Client\"),",
        "detail": "apps.users.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserChangeForm",
        "kind": 6,
        "importPath": "apps.users.forms",
        "description": "apps.users.forms",
        "peekOfCode": "class CustomUserChangeForm(UserChangeForm):\n    class Meta:\n        model = CustomUser\n        # fields = ('username', 'email')\n        fields = UserChangeForm.Meta.fields\nclass EmployeeCreationForm(UserCreationForm):\n    EMP_CHOICES = ((\"employee\", \"Employee\"),)\n    role = forms.CharField(\n        required=True,\n        widget=forms.Select(",
        "detail": "apps.users.forms",
        "documentation": {}
    },
    {
        "label": "EmployeeCreationForm",
        "kind": 6,
        "importPath": "apps.users.forms",
        "description": "apps.users.forms",
        "peekOfCode": "class EmployeeCreationForm(UserCreationForm):\n    EMP_CHOICES = ((\"employee\", \"Employee\"),)\n    role = forms.CharField(\n        required=True,\n        widget=forms.Select(\n            choices=EMP_CHOICES,\n            attrs={\n                \"class\": \"form-control\",\n                \"type\": \"text\",\n            },",
        "detail": "apps.users.forms",
        "documentation": {}
    },
    {
        "label": "MessageForm",
        "kind": 6,
        "importPath": "apps.users.forms",
        "description": "apps.users.forms",
        "peekOfCode": "class MessageForm(forms.ModelForm):\n    body = forms.CharField(\n        required=True,\n        widget=forms.Textarea(\n            attrs={\n                \"class\": \"form-control\",\n            }\n        ),\n    )\n    class Meta:",
        "detail": "apps.users.forms",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "apps.users.models",
        "description": "apps.users.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    \"\"\"\n    Handling Users for authentication\n    \"\"\"\n    # * add additional fields in here\n    # is_client = models.BooleanField(default=True) # < == remove it if u didn't use it\n    mobile1 = models.CharField(max_length=30, unique=True)\n    mobile2 = models.CharField(max_length=30, blank=True, null=True)\n    phone = models.CharField(max_length=30, blank=True, null=True)\n    role = models.CharField(",
        "detail": "apps.users.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "apps.users.models",
        "description": "apps.users.models",
        "peekOfCode": "class Message(models.Model):\n    sender = models.ForeignKey(\n        CustomUser, related_name=\"sender\", on_delete=models.CASCADE\n    )\n    receiver = models.ForeignKey(\n        CustomUser, related_name=\"receiver\", on_delete=models.CASCADE, verbose_name=\"To\"\n    )\n    body = models.TextField(verbose_name=\"Message\")\n    is_read = models.BooleanField(default=False)\n    active = models.BooleanField(default=False, verbose_name=_(\"Active\"))",
        "detail": "apps.users.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "apps.users.urls",
        "description": "apps.users.urls",
        "peekOfCode": "app_name = \"users\"\nurlpatterns = [\n    ###############??????????? not needed here oin accounts app\n    # path(\n    #     \"profile/for/user/id/<user_id>/\",\n    #     login_required(edit_user_profile),\n    #     name=\"edit_user_profile\",\n    # ),  # profile page views\n    path(\"messages/\", login_required(sent_message), name=\"sent_message\"),\n    path(\"messages/<int:id>/\", login_required(edit_message), name=\"edit_message\"),",
        "detail": "apps.users.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.users.urls",
        "description": "apps.users.urls",
        "peekOfCode": "urlpatterns = [\n    ###############??????????? not needed here oin accounts app\n    # path(\n    #     \"profile/for/user/id/<user_id>/\",\n    #     login_required(edit_user_profile),\n    #     name=\"edit_user_profile\",\n    # ),  # profile page views\n    path(\"messages/\", login_required(sent_message), name=\"sent_message\"),\n    path(\"messages/<int:id>/\", login_required(edit_message), name=\"edit_message\"),\n    path(\"list/messages/\", login_required(list_messages), name=\"list_messages\"),",
        "detail": "apps.users.urls",
        "documentation": {}
    },
    {
        "label": "users_table",
        "kind": 2,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "def users_table(request):\n    show_log = request.GET.get(\"show-log\")\n    show_deleted = request.GET.get(\"show-deleted\")\n    in_active = request.GET.get(\"in-active\")\n    is_active = request.GET.get(\"active\")\n    show_main = request.GET.get('show-main')\n    print(\n        # 'TYPE****', type,\n        'show_log@@@@@@@@@@@', show_log,\n        \"SHOW DELETEDDDDDD\",show_deleted,",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "edit_user_profile_old",
        "kind": 2,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "def edit_user_profile_old(request, user_id):\n    match = AdminProfile.objects.filter(user_id=user_id).exists()\n    if match:\n        qs = AdminProfile.objects.select_related('user').get(user_id=user_id)\n    else:\n        qs = None\n    form = AdminProfileForm(request.POST or None, request.FILES or None, instance=qs)\n    if form.is_valid():\n        profile_form = form.save(commit=False)\n        profile_form.user_id = request.user.id",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "profile_details",
        "kind": 2,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "def profile_details(request, user_id):\n    qs = AdminProfile.objects.select_related(\n        'user'\n    ).get(user_id=user_id)\n    context = {\n        \"title\": \"Profile Details\",\n    }\n    return render(request, '', context)\ndef sent_message(request):\n    ''' '''",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "sent_message",
        "kind": 2,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "def sent_message(request):\n    ''' '''\n    if request.POST:\n        form = MessageForm(request.POST or None, user=request.user.id)\n        if form.is_valid():\n            save_form = form.save(commit=False)\n            save_form.sender_id = request.user.id\n            save_form.save()\n            messages.success(request, 'Message has been sent to ' + '(' + save_form.receiver.username + ')')\n            return redirect(reverse('users:edit_message', kwargs={'id': save_form.id}))",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "edit_message",
        "kind": 2,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "def edit_message(request, id):\n    ''' '''\n    # user = request.user.id\n    # if  request.user.is_staff:\n    qs = Message.objects.get(id=id)\n    form = MessageForm(request.user.id, request.POST or None, instance=qs)\n    if request.POST:\n        if form.is_valid():\n            save_form = form.save(commit=False)\n            save_form.sender_id = request.user.id",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "list_messages",
        "kind": 2,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "def list_messages(request):\n    ''' '''\n    qs_all = Message.objects.filter(is_read=False, receiver_id=request.user.id)\n    qs_true = Message.objects.filter(is_read=True, receiver_id=request.user.id)\n    Users = Message.objects.select_related('sender').filter(sender__is_staff=True, receiver_id=request.user.id).order_by('-created').distinct()\n    # Users = Message.objects.values('sender').annotate(Count('sender')).filter(sender__is_staff=True, receiver_id=request.user.id).order_by('-created')\n    # record = [item for item in Users]\n    print('Users_from_func:=', Users, )  #Users[0]['sender__count']\n    context = {\n        'qs_true': qs_true,",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "list_user_messages",
        "kind": 2,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "def list_user_messages(request, sender):\n    # qs_all = Message.objects.values('sender_id__username','is_read').filter(reciever_id=request.user.id)\n    # all_isread = request.POST.get('all-isread')\n    # print(qs_all, all_isread)\n    Users = Message.objects.select_related('sender').filter(sender__username=sender, receiver_id=request.user.id).order_by('-created').distinct()\n    # sender = [item for item in Users]\n    context = {\n        'users': Users,\n        \"title\": \"List User Messages\",\n    }",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "is_read_changes",
        "kind": 2,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "def is_read_changes(request, id):\n    qs = Message.objects.get(id=id)\n    if qs.is_read:\n        Message.objects.filter(id=id, receiver_id=request.user.id).update(is_read=False)\n    else:\n        Message.objects.filter(id=id, receiver_id=request.user.id).update(is_read=True)\n    return redirect(reverse('users:list_user_messages', kwargs={'sender': qs.sender}))\ndef mark_all_is_read(request):\n    ''''''\n    # qs_all = Message.objects.values('sender_id__username','is_read').order_by('-created')",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "mark_all_is_read",
        "kind": 2,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "def mark_all_is_read(request):\n    ''''''\n    # qs_all = Message.objects.values('sender_id__username','is_read').order_by('-created')\n    qs_all = Message.objects.filter(is_read=False, receiver_id=request.user.id).order_by('-created')\n    # if request.method == 'GET':\n    #     all_is_read = request.GET.get('all-is_read')\n    #     print(all_is_read)\n    if qs_all:\n        Message.objects.filter(is_read=False, receiver_id=request.user.id).update(is_read=True)\n    else:",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.visitdrug.migrations.0001_initial",
        "description": "apps.visitdrug.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patientdata', '0001_initial'),\n        ('visits', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Medicine',\n            fields=[",
        "detail": "apps.visitdrug.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "VisitdrugConfig",
        "kind": 6,
        "importPath": "apps.visitdrug.apps",
        "description": "apps.visitdrug.apps",
        "peekOfCode": "class VisitdrugConfig(AppConfig):\n    name = 'apps.visitdrug'",
        "detail": "apps.visitdrug.apps",
        "documentation": {}
    },
    {
        "label": "MedicineForm",
        "kind": 6,
        "importPath": "apps.visitdrug.forms",
        "description": "apps.visitdrug.forms",
        "peekOfCode": "class MedicineForm(forms.ModelForm):\n    # patient = forms.ModelChoiceField(queryset=Patients.objects.all(), required=True, label='Patient Name',\n    #                        widget=forms.Select(\n    #                            attrs={\n    #                                'class': 'form-control',\n    #                                'id': 'patient',\n    #                             #    'v-model': \"patient_name\",\n    #                                 # 'disabled':'disabled'\n    #                            }))\n    # visit = forms.ModelChoiceField(queryset=Visits.objects.all(), required=True, label='Visit No.',",
        "detail": "apps.visitdrug.forms",
        "documentation": {}
    },
    {
        "label": "Medicine",
        "kind": 6,
        "importPath": "apps.visitdrug.models",
        "description": "apps.visitdrug.models",
        "peekOfCode": "class Medicine(models.Model):\n    name    = models.CharField(max_length=100,\n                            null=True, blank=True, help_text=\"Add Drug Here Please ....\")\n    plan    = models.CharField(max_length=150, null=True, blank=True)\n    patient = models.ForeignKey(Patients, on_delete=models.CASCADE)\n    visit   = models.ForeignKey(Visits, null=True, blank=True, on_delete=models.CASCADE)\n    # presc   = models.IntegerField(default=0)\n    def __str__(self):\n        return \"{}\".format(self.name)\n    def get_absolute_url(self):",
        "detail": "apps.visitdrug.models",
        "documentation": {}
    },
    {
        "label": "validate_none",
        "kind": 2,
        "importPath": "apps.visitdrug.models",
        "description": "apps.visitdrug.models",
        "peekOfCode": "def validate_none(value):\n    if value == None:\n        raise ValidationError(_('%(value)s must be not NONE'),\n            params={'value': '0'},\n        )\n# Sample of an ID generator - could be any string/number generator\n# For a 6-char field, this one yields 2.1 billion unique IDs\ndef id_generator(size=6, chars=ascii_uppercase + digits):\n    return ''.join(random.choice(chars) for _ in range(size))\nclass Medicine(models.Model):",
        "detail": "apps.visitdrug.models",
        "documentation": {}
    },
    {
        "label": "id_generator",
        "kind": 2,
        "importPath": "apps.visitdrug.models",
        "description": "apps.visitdrug.models",
        "peekOfCode": "def id_generator(size=6, chars=ascii_uppercase + digits):\n    return ''.join(random.choice(chars) for _ in range(size))\nclass Medicine(models.Model):\n    name    = models.CharField(max_length=100,\n                            null=True, blank=True, help_text=\"Add Drug Here Please ....\")\n    plan    = models.CharField(max_length=150, null=True, blank=True)\n    patient = models.ForeignKey(Patients, on_delete=models.CASCADE)\n    visit   = models.ForeignKey(Visits, null=True, blank=True, on_delete=models.CASCADE)\n    # presc   = models.IntegerField(default=0)\n    def __str__(self):",
        "detail": "apps.visitdrug.models",
        "documentation": {}
    },
    {
        "label": "print_html",
        "kind": 2,
        "importPath": "apps.visitdrug.prescription",
        "description": "apps.visitdrug.prescription",
        "peekOfCode": "def print_html(request, visit_id):\n    vis_id = Visits.objects.get(id=visit_id)\n    table = MedicineTable(Medicine.objects.filter(visit=visit_id).order_by('-id'), show_header=False)\n    qs = Medicine.objects.filter(visit=visit_id).order_by('-id') \n    patname = Medicine.objects.values('patient').filter(visit=visit_id).first()\n    patid = Medicine.objects.values('patient_id').filter(visit=visit_id).first()\n    # pat_id = patid['patient_id']\n    print(patid)\n    match = Medicine.objects.filter(visit=visit_id).exists()\n    if match:",
        "detail": "apps.visitdrug.prescription",
        "documentation": {}
    },
    {
        "label": "get_pdf",
        "kind": 2,
        "importPath": "apps.visitdrug.prescription",
        "description": "apps.visitdrug.prescription",
        "peekOfCode": "def get_pdf(request, visit_id, *args, **kwargs):\n    vis_id = Visits.objects.get(id=visit_id)\n    qs = Medicine.objects.filter(visit=visit_id).order_by('-id')\n    plan = Medicine.objects.values('plan').filter(visit=visit_id).first()\n    plan1 = Medicine.objects.filter(plan=plan['plan'])\n    vdate = Visits.objects.values('visitdate').filter(id=visit_id).first()\n    visitdate = vdate['visitdate']\n    patname = Medicine.objects.values('patient').filter(visit=visit_id).first()\n    patient = Patients.objects.get(id=patname['patient'])#patname['patient']\n    print(patient , plan1)",
        "detail": "apps.visitdrug.prescription",
        "documentation": {}
    },
    {
        "label": "pdf_view",
        "kind": 2,
        "importPath": "apps.visitdrug.prescription",
        "description": "apps.visitdrug.prescription",
        "peekOfCode": "def pdf_view(request, *args, **kwargs):\n    # with open('/path/to/my/file.pdf', 'r') as pdf:\n    #     response = HttpResponse(pdf.read(), ContentType='application/pdf')\n    #     response['Content-Disposition'] = 'inline;filename=some_file.pdf'\n    #     return response\n    # pdf.closed\n    objkey = kwargs.get('pk', None) #1\n    pdf = get_object_or_404(Pdf, pk=objkey) #2\n    fname = pdf.filename() #3\n    path = os.path.join(settings.MEDIA_ROOT, 'docs\\\\' + fname)#4",
        "detail": "apps.visitdrug.prescription",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.visitdrug.urls",
        "description": "apps.visitdrug.urls",
        "peekOfCode": "urlpatterns = [\n    #\n    path('prescription/for/patient/<int:patient_id>/visit/<int:visit_id>/',\n        save_medicine, name='save_medicine'),\n    #\n    path('add/prescription/for/patient/<int:patient_id>/visit/<int:visit_id>/',\n        add_new, name='add_new'),\n    #\n    path('patient/<int:patient_id>/visit/<int:visit_id>/drug/<int:id>/', \n        edit_medicine, name='edit_medicine'),",
        "detail": "apps.visitdrug.urls",
        "documentation": {}
    },
    {
        "label": "save_medicine",
        "kind": 2,
        "importPath": "apps.visitdrug.views",
        "description": "apps.visitdrug.views",
        "peekOfCode": "def save_medicine(request, patient_id, visit_id):\n    \"\"\"Method for saving patient's medicine\"\"\"\n    # last = Medicine.objects.values('presc').last()\n    # if last is None:\n    #     last = {'presc':1}\n    # else:\n    # last = Medicine.objects.values('presc').last()\n    page_no = request.GET.get(\"pages\")\n    if request.GET.get(\"pages\") == \"0\":\n        page_no = \"1\"",
        "detail": "apps.visitdrug.views",
        "documentation": {}
    },
    {
        "label": "edit_medicine",
        "kind": 2,
        "importPath": "apps.visitdrug.views",
        "description": "apps.visitdrug.views",
        "peekOfCode": "def edit_medicine(request, patient_id, visit_id, id):  # Making Update to a Medicine\n    table = MedicineTable(\n        Medicine.objects.filter(visit=visit_id).order_by(\"-id\"), exclude=\"patient\"\n    )\n    # page_no = request.GET.get('pages')\n    table.paginate(page=request.GET.get(\"page\", 1), per_page=10)\n    patient = Patients.objects.get(id=patient_id)  #\n    patientid = (\n        Visits.objects.values(\"patient_id\").filter(patient_id=patient_id).first()\n    )",
        "detail": "apps.visitdrug.views",
        "documentation": {}
    },
    {
        "label": "table_medicine",
        "kind": 2,
        "importPath": "apps.visitdrug.views",
        "description": "apps.visitdrug.views",
        "peekOfCode": "def table_medicine(request):\n    table = MedicineTable(Medicine.objects.all().order_by(\"-id\"))\n    table.paginate(page=request.GET.get(\"page\", 1), per_page=10)\n    context = {\"table_medicine\": table}\n    return render(request, \"tables.html\", context)\n# HttpResponse for http direct write\ndef delete_medicine(request, patient, visit, id):\n    pat_id = Patients.objects.get(id=patient)\n    vis_id = Visits.objects.get(id=visit)\n    pat = Medicine.objects.values(\"patient_id\").filter(patient_id=pat_id).first()",
        "detail": "apps.visitdrug.views",
        "documentation": {}
    },
    {
        "label": "delete_medicine",
        "kind": 2,
        "importPath": "apps.visitdrug.views",
        "description": "apps.visitdrug.views",
        "peekOfCode": "def delete_medicine(request, patient, visit, id):\n    pat_id = Patients.objects.get(id=patient)\n    vis_id = Visits.objects.get(id=visit)\n    pat = Medicine.objects.values(\"patient_id\").filter(patient_id=pat_id).first()\n    patient_id = pat[\"patient_id\"]\n    vis = Medicine.objects.values(\"visit\").filter(visit=visit).first()\n    visit_id = vis[\"visit\"]\n    qs = Medicine.objects.get(id=id)\n    del_med = qs.delete()\n    print(pat, patient_id)",
        "detail": "apps.visitdrug.views",
        "documentation": {}
    },
    {
        "label": "add_new",
        "kind": 2,
        "importPath": "apps.visitdrug.views",
        "description": "apps.visitdrug.views",
        "peekOfCode": "def add_new(request, patient_id, visit_id):\n    \"\"\"Method for saving patient's medicine\"\"\"\n    # last = Medicine.objects.values('presc').last()\n    # # print('last = ' + str(last))\n    # if last is None:\n    #     last = {'presc':1}\n    # else:\n    #     last = Medicine.objects.values('presc').last()\n    # match_last = Medicine.objects.filter(visit=visit_id, patient=patient_id, presc=last['presc']).exists()\n    # if match_last:",
        "detail": "apps.visitdrug.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.visits.migrations.0001_initial",
        "description": "apps.visits.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patientdata', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Visits',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "apps.visits.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.visits.migrations.0002_visits_visit_count_alter_visits_amount",
        "description": "apps.visits.migrations.0002_visits_visit_count_alter_visits_amount",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('visits', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='visits',\n            name='visit_count',\n            field=models.IntegerField(default=0),\n        ),",
        "detail": "apps.visits.migrations.0002_visits_visit_count_alter_visits_amount",
        "documentation": {}
    },
    {
        "label": "VisitsConfig",
        "kind": 6,
        "importPath": "apps.visits.apps",
        "description": "apps.visits.apps",
        "peekOfCode": "class VisitsConfig(AppConfig):\n    name = 'apps.visits'",
        "detail": "apps.visits.apps",
        "documentation": {}
    },
    {
        "label": "VisitsForm",
        "kind": 6,
        "importPath": "apps.visits.forms",
        "description": "apps.visits.forms",
        "peekOfCode": "class VisitsForm(forms.ModelForm):\n    # id = forms.IntegerField(required=False, label='Visit No.',\n    #                        widget=forms.NumberInput(\n    #                            attrs={\n    #                                'class': 'form-control',\n    #                                'readonly': 'readonly',\n    #                             #    'style': ('background-color:lightgreen')\n    #                            })\n    #                        )\n    # patient = forms.ModelChoiceField(queryset=Patients.objects.all(), required=True, label='Name',",
        "detail": "apps.visits.forms",
        "documentation": {}
    },
    {
        "label": "validate_none",
        "kind": 2,
        "importPath": "apps.visits.forms",
        "description": "apps.visits.forms",
        "peekOfCode": "def validate_none(value):\n    if value is None:\n        raise ValidationError(\n            _(\"%(value)s must be not NONE\"),\n            params={\"value\": \"0\"},\n        )\nclass VisitsForm(forms.ModelForm):\n    # id = forms.IntegerField(required=False, label='Visit No.',\n    #                        widget=forms.NumberInput(\n    #                            attrs={",
        "detail": "apps.visits.forms",
        "documentation": {}
    },
    {
        "label": "Visits",
        "kind": 6,
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "peekOfCode": "class Visits(models.Model):\n    patient = models.ForeignKey(\n        Patients, null=True, blank=True, on_delete=models.CASCADE\n    )\n    visitdate = models.DateField(default=date.today, blank=True, null=True)\n    complain = models.TextField(default=\"comp\", blank=True, null=True)\n    sign = models.TextField(default=\"sign\", null=True, blank=True)\n    diagnosis = models.CharField(max_length=150, null=True, blank=True)\n    intervention = models.CharField(max_length=150, null=True, blank=True)\n    amount = models.DecimalField(decimal_places=2, max_digits=15, default=0)",
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "validate_none",
        "kind": 2,
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "peekOfCode": "def validate_none(value):\n    if value is not None:\n        raise ValidationError(\n            _(\"%(value)s must be not NONE\"),\n            params={\"value\": \"0\"},\n        )\n# Sample of an ID generator - could be any string/number generator\n# For a 6-char field, this one yields 2.1 billion unique IDs\ndef id_generator(size=6, chars=ascii_uppercase + digits):\n    return \"\".join(random.choice(chars) for _ in range(size))",
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "id_generator",
        "kind": 2,
        "importPath": "apps.visits.models",
        "description": "apps.visits.models",
        "peekOfCode": "def id_generator(size=6, chars=ascii_uppercase + digits):\n    return \"\".join(random.choice(chars) for _ in range(size))\nclass Visits(models.Model):\n    patient = models.ForeignKey(\n        Patients, null=True, blank=True, on_delete=models.CASCADE\n    )\n    visitdate = models.DateField(default=date.today, blank=True, null=True)\n    complain = models.TextField(default=\"comp\", blank=True, null=True)\n    sign = models.TextField(default=\"sign\", null=True, blank=True)\n    diagnosis = models.CharField(max_length=150, null=True, blank=True)",
        "detail": "apps.visits.models",
        "documentation": {}
    },
    {
        "label": "render_footer",
        "kind": 2,
        "importPath": "apps.visits.tables",
        "description": "apps.visits.tables",
        "peekOfCode": "def render_footer(bound_column, table):\n    return sum(bound_column.accessor.resolve(row) for row in table.data)\n    # s = sum(bound_column.accessor.resolve(row) for row in table.data)\n    # return s\n# class VisitsTable(tables.Table):\n#     # def render_id(self, **kwargs):\n#     #     return kwargs['value'].id\n#     # def render_forid(self, value, record):\n#     #     return mark_safe('''<a href=%s>%s</a>''' % (record['id'], value))\n#     # return \"%s\" % value",
        "detail": "apps.visits.tables",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "apps.visits.urls",
        "description": "apps.visits.urls",
        "peekOfCode": "app_name = \"visits\"\nurlpatterns = [\n    # ? for CBV\n    path(\n        \"add/new/visit/for/patient-id/<int:patient_id>/\",  # <int:patient_id>/\n        views.VisitView.as_view(),\n        name=\"add-visit\",\n    ),\n    path(\n        \"edit/visit-id/<int:visit_id>/for/patient-id/<int:patient_id>/\",",
        "detail": "apps.visits.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.visits.urls",
        "description": "apps.visits.urls",
        "peekOfCode": "urlpatterns = [\n    # ? for CBV\n    path(\n        \"add/new/visit/for/patient-id/<int:patient_id>/\",  # <int:patient_id>/\n        views.VisitView.as_view(),\n        name=\"add-visit\",\n    ),\n    path(\n        \"edit/visit-id/<int:visit_id>/for/patient-id/<int:patient_id>/\",\n        views.VisitUpdateView.as_view(),",
        "detail": "apps.visits.urls",
        "documentation": {}
    },
    {
        "label": "VisitView",
        "kind": 6,
        "importPath": "apps.visits.views",
        "description": "apps.visits.views",
        "peekOfCode": "class VisitView(CreateView):  # (TemplateView):\n    template_name = \"visits/add_visit.html\"\n    form_class = VisitsForm\n    queryset = Visits.objects.only()[:100]\n    success_url = reverse_lazy(\"visits:add-visit\")\n    def post(self, request, *args, **kwargs):\n        \"\"\"\n        Handle POST requests: instantiate a form instance with the passed\n        POST variables and then check if it's valid.\n        \"\"\"",
        "detail": "apps.visits.views",
        "documentation": {}
    },
    {
        "label": "VisitUpdateView",
        "kind": 6,
        "importPath": "apps.visits.views",
        "description": "apps.visits.views",
        "peekOfCode": "class VisitUpdateView(UpdateView):\n    model = Visits\n    template_name = \"visits/edit_visit.html\"\n    pk_url_kwarg = \"visit_id\"\n    queryset = Visits.objects.only()\n    form_class = VisitsForm\n    template_name_suffix = \"_update_form\"\n    success_url = reverse_lazy(\"visits:edit-visit\")\n    def form_invalid(self, form):\n        \"\"\"If the form is invalid, render the invalid form.\"\"\"",
        "detail": "apps.visits.views",
        "documentation": {}
    },
    {
        "label": "VisitListView",
        "kind": 6,
        "importPath": "apps.visits.views",
        "description": "apps.visits.views",
        "peekOfCode": "class VisitListView(ListView):\n    \"\"\"\n    Displaying visits card for every patient and visits table\n    \"\"\"\n    model = Visits\n    # context_object_name = \"\"\n    template_name = \"visits/visits_table.html\"\n    queryset = Visits.objects.only()  # [:100]\n    visits_url = \"/visits/table/list/every/visits/\"\n    def get_queryset(self):",
        "detail": "apps.visits.views",
        "documentation": {}
    },
    {
        "label": "export_table",
        "kind": 2,
        "importPath": "apps.visits.views",
        "description": "apps.visits.views",
        "peekOfCode": "def export_table(request):\n    table = VisitsTable(Visits.objects.all())\n    RequestConfig(request).configure(table)\n    export_format = request.GET.get(\"csv, json\", None)\n    if TableExport.is_valid_format(export_format):\n        # exclude columns while creating the TableExport instance:\n        # exporter = TableExport(\"csv\", table, exclude_columns=(\"image\", \"buttons\"))\n        exporter = TableExport(\n            export_format, table, dataset_kwargs={\"title\": \"My Custom Sheet Name\"}\n        )",
        "detail": "apps.visits.views",
        "documentation": {}
    },
    {
        "label": "pass_patient_id",
        "kind": 2,
        "importPath": "apps.visits.views",
        "description": "apps.visits.views",
        "peekOfCode": "def pass_patient_id(request, id):  # Making save to new visits\n    patient = Patients.objects.get(id=id)  # out put is the patient name\n    patient_id = (\n        Patients.objects.values(\"id\").filter(id=id).first()\n    )  # This is out put of without .first()=> <QuerySet [{'id': 36}]>\n    var = patient_id[\"id\"]\n    # var1 = Patients.objects.values('mobile').filter(id=id).first()\n    # var11 = var1['mobile']\n    # print(patient, patient_id)\n    match_pasthist = PastHistory.objects.filter(patient=id).exists()",
        "detail": "apps.visits.views",
        "documentation": {}
    },
    {
        "label": "visits_patient_id",
        "kind": 2,
        "importPath": "apps.visits.views",
        "description": "apps.visits.views",
        "peekOfCode": "def visits_patient_id(\n    request, id, patient_id\n):  # Making Update to a visit with knowing the patient id\n    query = Visits.objects.get(id=id)  # out put Visit ID\n    qs = (\n        Visits.objects.values(\"id\", \"patient_id\")\n        .filter(id=id, patient_id=patient_id)\n        .first()\n    )  # {'patient_id': 2}\n    # for get_url() to redirect to -save present history- form",
        "detail": "apps.visits.views",
        "documentation": {}
    },
    {
        "label": "table_visits",
        "kind": 2,
        "importPath": "apps.visits.views",
        "description": "apps.visits.views",
        "peekOfCode": "def table_visits(request):\n    qs = Visits.objects.select_related(\"patient\").order_by(\n        \"-id\"\n    )  # the next lines are the result of this query ORM\n    # qs = Medicine.objects.select_related('patient').order_by('-id')\n    # ''' SELECT \"clinic_visits\".\"id\", \"clinic_visits\".\"patient_id\", \"clinic_visits\".\"visitdate\",\n    # \"clinic_visits\".\"complain\", \"clinic_visits\".\"sign\", \"clinic_visits\".\"diagnosis\", \"clinic_visits\".\"intervention\",\n    # \"clinic_visits\".\"amount\", \"clinic_patients\".\"id\", \"clinic_patients\".\"name\", \"clinic_patients\".\"address\",\n    # \"clinic_patients\".\"birth_date\", \"clinic_patients\".\"age\", \"clinic_patients\".\"phone\", \"clinic_patients\".\"mobile\",\n    # \"clinic_patients\".\"cardid\" FROM \"clinic_visits\"",
        "detail": "apps.visits.views",
        "documentation": {}
    },
    {
        "label": "ajax_append",
        "kind": 2,
        "importPath": "config.ajax_helper",
        "description": "config.ajax_helper",
        "peekOfCode": "def ajax_append(request):\n    data = {}\n    last_unit_name = UnitNames.objects.values_list('name').last()\n    last_unit_id = UnitNames.objects.values_list('id').last()\n    data['last_unit_name'] = last_unit_name #json.dumps(\n    data['last_unit_id'] = last_unit_id #json.dumps(\n    return JsonResponse(data) \ndef login_required(request):\n    data = {}\n    data['error'] = ''",
        "detail": "config.ajax_helper",
        "documentation": {}
    },
    {
        "label": "login_required",
        "kind": 2,
        "importPath": "config.ajax_helper",
        "description": "config.ajax_helper",
        "peekOfCode": "def login_required(request):\n    data = {}\n    data['error'] = ''\n    data['type'] = '' \n    if not request.user.is_authenticated:\n        msg ='You must be login in order to access our ERP system'\n        data['error'] = msg\n        data['type'] = 'info'\n    else:\n        msg ='Welcome to your dashboard'",
        "detail": "config.ajax_helper",
        "documentation": {}
    },
    {
        "label": "ajax_product_cat_tab",
        "kind": 2,
        "importPath": "config.ajax_helper",
        "description": "config.ajax_helper",
        "peekOfCode": "def ajax_product_cat_tab(request):\n    # branch_name = request.POST.get('pro-branch')\n    # print('BRANCHES: ', branch_name, )\n    # # branches = Branches.objects.only()\n    # if branch_name != None or branch_name != '':\n    #     pos_stations = PosStation.objects.values_list(\n    #         'name', flat=True\n    #     ).filter(\n    #         branch=Branches.objects.select_related(\n    #             'user'",
        "detail": "config.ajax_helper",
        "documentation": {}
    },
    {
        "label": "category_message_post",
        "kind": 2,
        "importPath": "config.ajax_helper",
        "description": "config.ajax_helper",
        "peekOfCode": "def category_message_post(request):\n    _category_name = request.POST.get('cat')\n    match = NewCategory.objects.filter(name=_category_name).exists()\n    error_msg = request.POST.get('error_msg')\n    print('ERROR FROM AJAX FUNCTION: ', error_msg)\n    _main = request.POST.get('main')\n    _parent = request.POST.get('parent')\n    _child = request.POST.get('child')\n    _main_name = request.POST.get('main_name')\n    if error_msg == 'Please select a category type -> 2':",
        "detail": "config.ajax_helper",
        "documentation": {}
    },
    {
        "label": "convert_text_to_id",
        "kind": 2,
        "importPath": "config.ajax_helper",
        "description": "config.ajax_helper",
        "peekOfCode": "def convert_text_to_id(request):\n    data = {}\n    vendor_name = request.GET.get('selectedText') \n    type = request.GET.get('type') \n    store_name = request.GET.get('selectedText') \n    print(\n        'vendor_name****', \"'\",vendor_name,\"'\",\n        'store_name****', \"'\", store_name, \"'\",\n        Stores.objects.values('id').last(),\n        'TYPE*****', type",
        "detail": "config.ajax_helper",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "LEVELS",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "LEVELS = (\n    (L1, _(\"Level-1\")),\n    (L2, _(\"Level-2\")),\n    (L3, _(\"Level-3\")),\n)\nSESSION_STATUS = (\n    (0, '--- Session Status ---'),\n    (1, 'مفتوح'),\n    (2, 'معلق'),\n    (3, 'مغلق'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "SESSION_STATUS",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "SESSION_STATUS = (\n    (0, '--- Session Status ---'),\n    (1, 'مفتوح'),\n    (2, 'معلق'),\n    (3, 'مغلق'),\n)\n#* for unites of measure\nUNITS = (\n    (\"main\", _(\"الوحدة الاساسية\")),\n    (\"sell\", _(\"وحدة البيع\")),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "UNITS",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "UNITS = (\n    (\"main\", _(\"الوحدة الاساسية\")),\n    (\"sell\", _(\"وحدة البيع\")),\n    (\"purchase\", _(\"وحدة الشراء\")),\n    (\"main_sell\", _(\"وحدة بيع اساسيه\")),\n    (\"main_purchase\", _(\"وحدة شراء اساسيه\")),\n    (\"default\", _(\"افتراضى\")),\n)\nHOUR = \"hour\"\nDAY = \"day\"",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "HOUR",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "HOUR = \"hour\"\nDAY = \"day\"\nWEEK = \"week\"\nMONTH = \"month\"\nYEAR = \"year\"\nTIMES = (\n    (HOUR, _(\"ساعة\")),\n    (DAY, _(\"يوم\")),\n    (WEEK, _(\"اسبوع\")),\n    (MONTH, _(\"شهر\")),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "DAY",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "DAY = \"day\"\nWEEK = \"week\"\nMONTH = \"month\"\nYEAR = \"year\"\nTIMES = (\n    (HOUR, _(\"ساعة\")),\n    (DAY, _(\"يوم\")),\n    (WEEK, _(\"اسبوع\")),\n    (MONTH, _(\"شهر\")),\n    (YEAR, _(\"سنة\")),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "WEEK = \"week\"\nMONTH = \"month\"\nYEAR = \"year\"\nTIMES = (\n    (HOUR, _(\"ساعة\")),\n    (DAY, _(\"يوم\")),\n    (WEEK, _(\"اسبوع\")),\n    (MONTH, _(\"شهر\")),\n    (YEAR, _(\"سنة\")),\n)",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "MONTH = \"month\"\nYEAR = \"year\"\nTIMES = (\n    (HOUR, _(\"ساعة\")),\n    (DAY, _(\"يوم\")),\n    (WEEK, _(\"اسبوع\")),\n    (MONTH, _(\"شهر\")),\n    (YEAR, _(\"سنة\")),\n)\nCASH = \"نقدى\"",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "YEAR = \"year\"\nTIMES = (\n    (HOUR, _(\"ساعة\")),\n    (DAY, _(\"يوم\")),\n    (WEEK, _(\"اسبوع\")),\n    (MONTH, _(\"شهر\")),\n    (YEAR, _(\"سنة\")),\n)\nCASH = \"نقدى\"\nDUE = \"اجل\"",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "TIMES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "TIMES = (\n    (HOUR, _(\"ساعة\")),\n    (DAY, _(\"يوم\")),\n    (WEEK, _(\"اسبوع\")),\n    (MONTH, _(\"شهر\")),\n    (YEAR, _(\"سنة\")),\n)\nCASH = \"نقدى\"\nDUE = \"اجل\"\nDUE_CASH= \"دفعات نقدية\"",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CASH",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "CASH = \"نقدى\"\nDUE = \"اجل\"\nDUE_CASH= \"دفعات نقدية\"\nCASH_MONEY = \"كاش\"\nCHEQUE = \"شيك\"\nTRANSFERE = \"تحويل\" \nVISA = \"فيزا\"\nWALLET = \"محفظة\"\nNEW_WALLET = \"  محفظةجديدة\"\nSAFE = \"خزينة\"",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "DUE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "DUE = \"اجل\"\nDUE_CASH= \"دفعات نقدية\"\nCASH_MONEY = \"كاش\"\nCHEQUE = \"شيك\"\nTRANSFERE = \"تحويل\" \nVISA = \"فيزا\"\nWALLET = \"محفظة\"\nNEW_WALLET = \"  محفظةجديدة\"\nSAFE = \"خزينة\"\nBANK_ACCOUNT = \"حساب بنكى\"",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CASH_MONEY",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "CASH_MONEY = \"كاش\"\nCHEQUE = \"شيك\"\nTRANSFERE = \"تحويل\" \nVISA = \"فيزا\"\nWALLET = \"محفظة\"\nNEW_WALLET = \"  محفظةجديدة\"\nSAFE = \"خزينة\"\nBANK_ACCOUNT = \"حساب بنكى\"\nSTORES = \"مخازن\"\nPAYMENT_METHODS = (",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CHEQUE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "CHEQUE = \"شيك\"\nTRANSFERE = \"تحويل\" \nVISA = \"فيزا\"\nWALLET = \"محفظة\"\nNEW_WALLET = \"  محفظةجديدة\"\nSAFE = \"خزينة\"\nBANK_ACCOUNT = \"حساب بنكى\"\nSTORES = \"مخازن\"\nPAYMENT_METHODS = (\n    (0, '--- Payment Methods ---'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "TRANSFERE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "TRANSFERE = \"تحويل\" \nVISA = \"فيزا\"\nWALLET = \"محفظة\"\nNEW_WALLET = \"  محفظةجديدة\"\nSAFE = \"خزينة\"\nBANK_ACCOUNT = \"حساب بنكى\"\nSTORES = \"مخازن\"\nPAYMENT_METHODS = (\n    (0, '--- Payment Methods ---'),\n    (1, CASH),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "VISA",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "VISA = \"فيزا\"\nWALLET = \"محفظة\"\nNEW_WALLET = \"  محفظةجديدة\"\nSAFE = \"خزينة\"\nBANK_ACCOUNT = \"حساب بنكى\"\nSTORES = \"مخازن\"\nPAYMENT_METHODS = (\n    (0, '--- Payment Methods ---'),\n    (1, CASH),\n    (2, DUE),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "WALLET",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "WALLET = \"محفظة\"\nNEW_WALLET = \"  محفظةجديدة\"\nSAFE = \"خزينة\"\nBANK_ACCOUNT = \"حساب بنكى\"\nSTORES = \"مخازن\"\nPAYMENT_METHODS = (\n    (0, '--- Payment Methods ---'),\n    (1, CASH),\n    (2, DUE),\n    # (3, VISA),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "NEW_WALLET",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "NEW_WALLET = \"  محفظةجديدة\"\nSAFE = \"خزينة\"\nBANK_ACCOUNT = \"حساب بنكى\"\nSTORES = \"مخازن\"\nPAYMENT_METHODS = (\n    (0, '--- Payment Methods ---'),\n    (1, CASH),\n    (2, DUE),\n    # (3, VISA),\n    # (4, CHEQUE),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "SAFE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "SAFE = \"خزينة\"\nBANK_ACCOUNT = \"حساب بنكى\"\nSTORES = \"مخازن\"\nPAYMENT_METHODS = (\n    (0, '--- Payment Methods ---'),\n    (1, CASH),\n    (2, DUE),\n    # (3, VISA),\n    # (4, CHEQUE),\n    # (5, TRANSFERE),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "BANK_ACCOUNT",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "BANK_ACCOUNT = \"حساب بنكى\"\nSTORES = \"مخازن\"\nPAYMENT_METHODS = (\n    (0, '--- Payment Methods ---'),\n    (1, CASH),\n    (2, DUE),\n    # (3, VISA),\n    # (4, CHEQUE),\n    # (5, TRANSFERE),\n)",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "STORES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "STORES = \"مخازن\"\nPAYMENT_METHODS = (\n    (0, '--- Payment Methods ---'),\n    (1, CASH),\n    (2, DUE),\n    # (3, VISA),\n    # (4, CHEQUE),\n    # (5, TRANSFERE),\n)\nTREASURY_TYPES = (",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "PAYMENT_METHODS",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "PAYMENT_METHODS = (\n    (0, '--- Payment Methods ---'),\n    (1, CASH),\n    (2, DUE),\n    # (3, VISA),\n    # (4, CHEQUE),\n    # (5, TRANSFERE),\n)\nTREASURY_TYPES = (\n    (0, '--- Treasury Types ---'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "TREASURY_TYPES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "TREASURY_TYPES = (\n    (0, '--- Treasury Types ---'),\n    (1, SAFE),\n    (2, VISA),\n    (3, WALLET),\n    (4, BANK_ACCOUNT),\n)\nCASH_PAYMENT_METHODS = (\n    (0, '--- Cash Payment Methods ---'),\n    (1, SAFE),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CASH_PAYMENT_METHODS",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "CASH_PAYMENT_METHODS = (\n    (0, '--- Cash Payment Methods ---'),\n    (1, SAFE),\n    (2, VISA),\n    (3, WALLET),\n    (4, NEW_WALLET)\n)\nTYPES = (\n    (0, '--- Choose Type ---'),\n    (1, SAFE),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "TYPES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "TYPES = (\n    (0, '--- Choose Type ---'),\n    (1, SAFE),\n    (2, VISA),\n    (3, WALLET),\n    (4, NEW_WALLET),\n    (5, BANK_ACCOUNT),\n    (6, STORES)\n)\nDUE_PAYMENT_METHODS = (",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "DUE_PAYMENT_METHODS",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "DUE_PAYMENT_METHODS = (\n    (1, DUE_CASH),\n    (2, CHEQUE),\n    (3, TRANSFERE),  # need an account_no \n)\nOWNER = \"owner\"\nCLIENT = \"client\"\nADMIN = 'admin'\nVENDOR = 'vendor'\n# EDITOR = 'editor'",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "OWNER",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "OWNER = \"owner\"\nCLIENT = \"client\"\nADMIN = 'admin'\nVENDOR = 'vendor'\n# EDITOR = 'editor'\nMANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nGUEST= 'guest'",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CLIENT",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "CLIENT = \"client\"\nADMIN = 'admin'\nVENDOR = 'vendor'\n# EDITOR = 'editor'\nMANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nGUEST= 'guest'\nUSER_TYPES = (",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "ADMIN",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "ADMIN = 'admin'\nVENDOR = 'vendor'\n# EDITOR = 'editor'\nMANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nGUEST= 'guest'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "VENDOR",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "VENDOR = 'vendor'\n# EDITOR = 'editor'\nMANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nGUEST= 'guest'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "MANAGER",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "MANAGER = 'manager'\nEMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nGUEST= 'guest'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "EMPLOYEE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "EMPLOYEE = 'employee'\nREPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nGUEST= 'guest'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),\n    (VENDOR, \"Vendor\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "REPRESENTATIVE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "REPRESENTATIVE = 'rep'\nDRIVER = 'driver'\nGUEST= 'guest'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),\n    (VENDOR, \"Vendor\"),\n    (CLIENT, \"Client\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "DRIVER",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "DRIVER = 'driver'\nGUEST= 'guest'\nUSER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),\n    (VENDOR, \"Vendor\"),\n    (CLIENT, \"Client\"),\n    (REPRESENTATIVE, \"Representative\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "USER_TYPES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "USER_TYPES = (\n    (OWNER, \"Owner\"),\n    (MANAGER, \"Manager\"),\n    (ADMIN, \"Admin\"),\n    (EMPLOYEE, \"Employee\"),\n    (VENDOR, \"Vendor\"),\n    (CLIENT, \"Client\"),\n    (REPRESENTATIVE, \"Representative\"),\n    (DRIVER, \"Driver\"),\n    (GUEST, \"Guest\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CLIENT_ROLE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "CLIENT_ROLE = (\n    (0, \"--Select Account Type--\"),\n    (1, \"Client\"),\n    (2, \"Employee\"),\n    (3, \"Vendor\"),\n)\nTRANSACTION_TYPE = (\n    (0, \"--Select Transaction Type--\"),\n    (1, _(\"Debit\")),\n    (2, _(\"Credit\")),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "TRANSACTION_TYPE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "TRANSACTION_TYPE = (\n    (0, \"--Select Transaction Type--\"),\n    (1, _(\"Debit\")),\n    (2, _(\"Credit\")),\n    (3, _(\"Debit & Credit\")),\n)\n# EMP_ROLE =(\n#     (0, \"--Select Employee Role --\"),\n#     (1, \"Supervisor\"),\n#     (2, \"Manager\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "SERVCIE_BILL_TYPE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "SERVCIE_BILL_TYPE = (\n    (0, '--Select Bill Type--'),\n    (1, 'Services'),\n    (2, 'Items'),\n    (3, 'Services & Items'),\n)\n#* for gender\nMALE = \"m\"\nFEMALE = \"f\"\nGENDER = (",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "MALE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "MALE = \"m\"\nFEMALE = \"f\"\nGENDER = (\n    (MALE, _(\"Male\")),\n    (FEMALE, _(\"Female\")),\n)\nMARITAL_STATUS = (\n    (0, \"--Select Marital Status--\"),\n    (1, \"Single\"),\n    (2, \"Married\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "FEMALE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "FEMALE = \"f\"\nGENDER = (\n    (MALE, _(\"Male\")),\n    (FEMALE, _(\"Female\")),\n)\nMARITAL_STATUS = (\n    (0, \"--Select Marital Status--\"),\n    (1, \"Single\"),\n    (2, \"Married\"),\n    (3, \"Divorced\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "GENDER",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "GENDER = (\n    (MALE, _(\"Male\")),\n    (FEMALE, _(\"Female\")),\n)\nMARITAL_STATUS = (\n    (0, \"--Select Marital Status--\"),\n    (1, \"Single\"),\n    (2, \"Married\"),\n    (3, \"Divorced\"),\n    (4, \"Widowed\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "MARITAL_STATUS",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "MARITAL_STATUS = (\n    (0, \"--Select Marital Status--\"),\n    (1, \"Single\"),\n    (2, \"Married\"),\n    (3, \"Divorced\"),\n    (4, \"Widowed\"),\n)\nMILITARY_STATUS = (\n    (0, \"--Select Military Status--\"),\n    (1, \"Exemption\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "MILITARY_STATUS",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "MILITARY_STATUS = (\n    (0, \"--Select Military Status--\"),\n    (1, \"Exemption\"),\n    (2, \"Postponed\"),\n    (3, \"Temporary Exemption\"),\n)\nRELIGION = (\n    (0, \"--Select Religion--\"),\n    (1, \"Muslim\"),\n    (2, \"Christian\"),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "RELIGION",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "RELIGION = (\n    (0, \"--Select Religion--\"),\n    (1, \"Muslim\"),\n    (2, \"Christian\"),\n)\n#* for Discount\nDISCOUNT_CHOICES = (\n    (0, 'Disc / Off'),\n    (1, '%'),\n    (2, '$'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "DISCOUNT_CHOICES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "DISCOUNT_CHOICES = (\n    (0, 'Disc / Off'),\n    (1, '%'),\n    (2, '$'),\n)\n#* for Tax\nTAX_CHOICES = (\n    (0, 'Tax/Off'),\n    (1, '%'),\n    (2, '$'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "TAX_CHOICES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "TAX_CHOICES = (\n    (0, 'Tax/Off'),\n    (1, '%'),\n    (2, '$'),\n)\n#* for Bill\nBILL_LINKED = (\n    (0, 'Bill Off'),\n    (1, 'Bill On'),\n    # (2, 'Off'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "BILL_LINKED",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "BILL_LINKED = (\n    (0, 'Bill Off'),\n    (1, 'Bill On'),\n    # (2, 'Off'),\n)\nBILL_TYPES = (\n    (0, 'Select Bill Type'),\n    (1, 'Sales Bill'),\n    (2, 'Return Sales Bill'),\n    (3, 'Purchases Bill'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "BILL_TYPES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "BILL_TYPES = (\n    (0, 'Select Bill Type'),\n    (1, 'Sales Bill'),\n    (2, 'Return Sales Bill'),\n    (3, 'Purchases Bill'),\n    (4, 'Return Purchases Bill'),\n)\n#* for store responsibles\nSTORE_ROLES = (\n    (0, '--Select Store Roles--'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "STORE_ROLES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "STORE_ROLES = (\n    (0, '--Select Store Roles--'),\n    (1, 'Full Access'),\n    (2, 'Add and Update'),\n    (3, 'Add Only'),\n)\nSALES_OFFER = (\n    (0, '--Select Sales Offer--'),\n    (1, 'Sales Offer 1'),\n    (2, 'Sales Offer 2'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "SALES_OFFER",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "SALES_OFFER = (\n    (0, '--Select Sales Offer--'),\n    (1, 'Sales Offer 1'),\n    (2, 'Sales Offer 2'),\n    (3, 'Sales Offer 3'),\n)\nCLIENT_TYPE = (\n    (0, '--Select Cliet Type--'),\n    (1, 'Cash'),\n    (2, 'On Line'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CLIENT_TYPE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "CLIENT_TYPE = (\n    (0, '--Select Cliet Type--'),\n    (1, 'Cash'),\n    (2, 'On Line'),\n    (3, 'Due'),\n    (4, 'Payments'),\n)\n#####\nEQUIPMENT_TYPE = (\n    (0, '--- Equipment Type ---'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "EQUIPMENT_TYPE",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "EQUIPMENT_TYPE = (\n    (0, '--- Equipment Type ---'),\n    (1, 'Equipment'),\n    (2, 'Vehicle'),\n)\nCURRENT_STATUS = (\n    (0, '--- Status ---'),\n    (1, 'In Service'),\n    (2, 'Out Of Service'),\n    (3, 'Under Maintenance'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CURRENT_STATUS",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "CURRENT_STATUS = (\n    (0, '--- Status ---'),\n    (1, 'In Service'),\n    (2, 'Out Of Service'),\n    (3, 'Under Maintenance'),\n    (4, 'In Storage'),\n    (5, 'Reserved'),\n    (6,'On Assignment'),\n    (7,'Damaged'),\n    (8,'Sold'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "VEHICLE_TYPES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "VEHICLE_TYPES = (\n    (0, '--- Select Vehicle Type ---'),\n    (1, 'Car'),\n    (2, 'Motorcycle'),\n    (3, 'Truck'),\n    (4, 'Bus'),\n    (5, 'Bicycle'),\n    (6, 'Scooter'),\n    (7, 'Van'),\n    (8, 'Tractor'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "EGYPT_GOVERNORATES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "EGYPT_GOVERNORATES = (\n    (0, '--- Select Governorates ---'),\n    (1, 'Alexandria'),\n    (2, 'Aswan'),\n    (3, 'Asyut'),\n    (4, 'Beheira'),\n    (5, 'Beni Suef'),\n    (6, 'Cairo'),\n    (7, 'Dakahlia'),\n    (8, 'Damietta'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "CITY",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "CITY = (\n    ('alexandria', 'ALEXANDRIA'),\n    ('aswan', 'ASWAN'),\n    ('asyut', 'ASYUT'),\n    ('beheira', 'BEHEIRA'),\n    ('benisuef', 'BENI SUEF'),\n    ('cairo', 'CAIRO'),\n    ('dakahlia', 'DAKAHLIA'),\n    ('demiatta', 'DAMIETTA'),\n    ('faiyum', 'FAIYUM'),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "COUNTRY",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "COUNTRY = (\n    # \"AF\":\"Afghanistan\",\n    # \"AX\":\"Aland Islands\",\n    # \"AL\":\"Albania\",\n    (\"DZ\", \"Algeria\"), # index=0\n    # \"AS\":\"American Samoa\",\n    # \"AD\":\"Andorra\",\n    # \"AO\":\"Angola\",\n    # \"AI\":\"Anguilla\",\n    # \"AQ\":\"Antarctica\",",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "NATIONALITIES",
        "kind": 5,
        "importPath": "config.choices",
        "description": "config.choices",
        "peekOfCode": "NATIONALITIES = (\n    ('AF', _(u'Afghan')),\n    ('AL', _(u'Albanian')),\n    ('DZ', _(u'Algerian')),\n    ('AD', _(u'Andorran')),\n    ('AO', _(u'Angolan')),\n    ('AR', _(u'Argentinian')),\n    ('AM', _(u'Armenian')),\n    ('AU', _(u'Australian')),\n    ('AT', _(u'Austrian')),",
        "detail": "config.choices",
        "documentation": {}
    },
    {
        "label": "my_setting",
        "kind": 2,
        "importPath": "config.context_processors",
        "description": "config.context_processors",
        "peekOfCode": "def my_setting(request):\n    context = {}\n    context[\"patients_count\"] = Patients.objects.aggregate(count=Count(\"id\"))[\"count\"]\n    context[\"doctors_count\"] = DoctorNames.objects.aggregate(count=Count(\"id\"))[\"count\"]\n    ##\n    context[\"MY_SETTING\"] = settings\n    return context\n# Add the 'ENVIRONMENT' setting to the template context\ndef environment(request):\n    return {\"ENVIRONMENT\": settings.ENVIRONMENT}",
        "detail": "config.context_processors",
        "documentation": {}
    },
    {
        "label": "environment",
        "kind": 2,
        "importPath": "config.context_processors",
        "description": "config.context_processors",
        "peekOfCode": "def environment(request):\n    return {\"ENVIRONMENT\": settings.ENVIRONMENT}",
        "detail": "config.context_processors",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# Update secret key in .env file and .env.prod file\n# SECRET_KEY = os.environ.get(\"SECRET_KEY\", default='')\n# SECURITY WARNING: keep the secret key used in production secret!\n# If using the .env file for SECRET_KEY then comment below random SECRET_KEY generation code.\nSECRET_KEY = os.environ.get(\"SECRET_KEY\")\nif not SECRET_KEY:\n    SECRET_KEY = \"\".join(random.choice(string.ascii_lowercase) for i in range(32))",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\")\nif not SECRET_KEY:\n    SECRET_KEY = \"\".join(random.choice(string.ascii_lowercase) for i in range(32))\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get(\"DEBUG\", \"True\").lower() in [\"true\", \"yes\", \"1\"]\n# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts\nALLOWED_HOSTS = [\"localhost\", \"0.0.0.0\", \"127.0.0.1\", \"192.168.1.199\"]\n# Current DJANGO_ENVIRONMENT\nENVIRONMENT = os.environ.get(\"DJANGO_ENVIRONMENT\", default=\"local\")\nprint(",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEBUG = os.environ.get(\"DEBUG\", \"True\").lower() in [\"true\", \"yes\", \"1\"]\n# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts\nALLOWED_HOSTS = [\"localhost\", \"0.0.0.0\", \"127.0.0.1\", \"192.168.1.199\"]\n# Current DJANGO_ENVIRONMENT\nENVIRONMENT = os.environ.get(\"DJANGO_ENVIRONMENT\", default=\"local\")\nprint(\n    \"DEBUG>>>\",\n    DEBUG,\n    \"SECRET_KEY>>>\",\n    SECRET_KEY,",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"localhost\", \"0.0.0.0\", \"127.0.0.1\", \"192.168.1.199\"]\n# Current DJANGO_ENVIRONMENT\nENVIRONMENT = os.environ.get(\"DJANGO_ENVIRONMENT\", default=\"local\")\nprint(\n    \"DEBUG>>>\",\n    DEBUG,\n    \"SECRET_KEY>>>\",\n    SECRET_KEY,\n    \"ENVIRONMENT>>>>>\",\n    ENVIRONMENT,",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ENVIRONMENT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ENVIRONMENT = os.environ.get(\"DJANGO_ENVIRONMENT\", default=\"local\")\nprint(\n    \"DEBUG>>>\",\n    DEBUG,\n    \"SECRET_KEY>>>\",\n    SECRET_KEY,\n    \"ENVIRONMENT>>>>>\",\n    ENVIRONMENT,\n)\n# Application definition",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # ? for allauth\n    \"django.contrib.sites\",  # Required for django-allauth\n    \"allauth\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"whitenoise.middleware.WhiteNoiseMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.locale.LocaleMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ROOT_URLCONF = \"config.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "WSGI_APPLICATION = \"config.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"src\" / \"assets\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"src\" / \"assets\",\n]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"src\" / \"assets\",\n]\nMEDIA_URL = \"/media/\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"src\" / \"assets\",\n]\nMEDIA_URL = \"/media/\"\n# MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"src\" / \"assets\",\n]\nMEDIA_URL = \"/media/\"\n# MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# MEDIA_ROOT = (BASE_DIR / \"media_root\")\nMEDIA_ROOT = BASE_DIR / \"media/\"\n# Default URL on which Django application runs for specific environment",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"src\" / \"assets\",\n]\nMEDIA_URL = \"/media/\"\n# MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# MEDIA_ROOT = (BASE_DIR / \"media_root\")\nMEDIA_ROOT = BASE_DIR / \"media/\"\n# Default URL on which Django application runs for specific environment\nBASE_URL = os.environ.get(\"BASE_URL\", default=\"http://127.0.0.1:8000\")",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / \"src\" / \"assets\",\n]\nMEDIA_URL = \"/media/\"\n# MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# MEDIA_ROOT = (BASE_DIR / \"media_root\")\nMEDIA_ROOT = BASE_DIR / \"media/\"\n# Default URL on which Django application runs for specific environment\nBASE_URL = os.environ.get(\"BASE_URL\", default=\"http://127.0.0.1:8000\")\n# Default primary key field type",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\n# MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# MEDIA_ROOT = (BASE_DIR / \"media_root\")\nMEDIA_ROOT = BASE_DIR / \"media/\"\n# Default URL on which Django application runs for specific environment\nBASE_URL = os.environ.get(\"BASE_URL\", default=\"http://127.0.0.1:8000\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Template Settings",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / \"media/\"\n# Default URL on which Django application runs for specific environment\nBASE_URL = os.environ.get(\"BASE_URL\", default=\"http://127.0.0.1:8000\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Template Settings\n# ------------------------------------------------------------------------------\nTHEME_LAYOUT_DIR = THEME_LAYOUT_DIR\nTHEME_VARIABLES = THEME_VARIABLES",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_URL = os.environ.get(\"BASE_URL\", default=\"http://127.0.0.1:8000\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Template Settings\n# ------------------------------------------------------------------------------\nTHEME_LAYOUT_DIR = THEME_LAYOUT_DIR\nTHEME_VARIABLES = THEME_VARIABLES\n# Your stuff...\n# ------------------------------------------------------------------------------",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Template Settings\n# ------------------------------------------------------------------------------\nTHEME_LAYOUT_DIR = THEME_LAYOUT_DIR\nTHEME_VARIABLES = THEME_VARIABLES\n# Your stuff...\n# ------------------------------------------------------------------------------\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\nAUTHENTICATION_BACKENDS = (\n    # Needed to login by username in Django admin, regardless of `allauth`",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "THEME_LAYOUT_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "THEME_LAYOUT_DIR = THEME_LAYOUT_DIR\nTHEME_VARIABLES = THEME_VARIABLES\n# Your stuff...\n# ------------------------------------------------------------------------------\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\nAUTHENTICATION_BACKENDS = (\n    # Needed to login by username in Django admin, regardless of `allauth`\n    \"django.contrib.auth.backends.ModelBackend\",\n    # `allauth` specific authentication methods, such as login by e-mail\n    \"allauth.account.auth_backends.AuthenticationBackend\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "THEME_VARIABLES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "THEME_VARIABLES = THEME_VARIABLES\n# Your stuff...\n# ------------------------------------------------------------------------------\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\nAUTHENTICATION_BACKENDS = (\n    # Needed to login by username in Django admin, regardless of `allauth`\n    \"django.contrib.auth.backends.ModelBackend\",\n    # `allauth` specific authentication methods, such as login by e-mail\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n)",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\nAUTHENTICATION_BACKENDS = (\n    # Needed to login by username in Django admin, regardless of `allauth`\n    \"django.contrib.auth.backends.ModelBackend\",\n    # `allauth` specific authentication methods, such as login by e-mail\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n)\n# for django-allauth manage users login,signup and logout\nAUTH_USER_MODEL = \"users.CustomUser\"\nLOGIN_REDIRECT_URL = \"/\"  # means",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = (\n    # Needed to login by username in Django admin, regardless of `allauth`\n    \"django.contrib.auth.backends.ModelBackend\",\n    # `allauth` specific authentication methods, such as login by e-mail\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n)\n# for django-allauth manage users login,signup and logout\nAUTH_USER_MODEL = \"users.CustomUser\"\nLOGIN_REDIRECT_URL = \"/\"  # means\nACCOUNT_LOGOUT_REDIRECT_URL = \"/\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"users.CustomUser\"\nLOGIN_REDIRECT_URL = \"/\"  # means\nACCOUNT_LOGOUT_REDIRECT_URL = \"/\"\n# * If True it will logout the user immediately\nACCOUNT_LOGOUT_ON_GET = True\nSITE_ID = 1\nACCOUNT_EMAIL_REQUIRED = False  # True\nACCOUNT_USERNAME_REQUIRED = True  # False\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # False\n# ACCOUNT_PASSWORD_MIN_LENGTH = 6 Deprecated",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"/\"  # means\nACCOUNT_LOGOUT_REDIRECT_URL = \"/\"\n# * If True it will logout the user immediately\nACCOUNT_LOGOUT_ON_GET = True\nSITE_ID = 1\nACCOUNT_EMAIL_REQUIRED = False  # True\nACCOUNT_USERNAME_REQUIRED = True  # False\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # False\n# ACCOUNT_PASSWORD_MIN_LENGTH = 6 Deprecated\nACCOUNT_SESSION_REMEMBER = True",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ACCOUNT_LOGOUT_REDIRECT_URL = \"/\"\n# * If True it will logout the user immediately\nACCOUNT_LOGOUT_ON_GET = True\nSITE_ID = 1\nACCOUNT_EMAIL_REQUIRED = False  # True\nACCOUNT_USERNAME_REQUIRED = True  # False\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # False\n# ACCOUNT_PASSWORD_MIN_LENGTH = 6 Deprecated\nACCOUNT_SESSION_REMEMBER = True\nACCOUNT_AUTHENTICATION_METHOD = \"username\"  # 'email'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_LOGOUT_ON_GET",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ACCOUNT_LOGOUT_ON_GET = True\nSITE_ID = 1\nACCOUNT_EMAIL_REQUIRED = False  # True\nACCOUNT_USERNAME_REQUIRED = True  # False\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # False\n# ACCOUNT_PASSWORD_MIN_LENGTH = 6 Deprecated\nACCOUNT_SESSION_REMEMBER = True\nACCOUNT_AUTHENTICATION_METHOD = \"username\"  # 'email'\nACCOUNT_UNIQUE_EMAIL = True\nfrom django.contrib.messages import constants as messages",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SITE_ID = 1\nACCOUNT_EMAIL_REQUIRED = False  # True\nACCOUNT_USERNAME_REQUIRED = True  # False\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # False\n# ACCOUNT_PASSWORD_MIN_LENGTH = 6 Deprecated\nACCOUNT_SESSION_REMEMBER = True\nACCOUNT_AUTHENTICATION_METHOD = \"username\"  # 'email'\nACCOUNT_UNIQUE_EMAIL = True\nfrom django.contrib.messages import constants as messages\nMESSAGE_TAGS = {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = False  # True\nACCOUNT_USERNAME_REQUIRED = True  # False\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # False\n# ACCOUNT_PASSWORD_MIN_LENGTH = 6 Deprecated\nACCOUNT_SESSION_REMEMBER = True\nACCOUNT_AUTHENTICATION_METHOD = \"username\"  # 'email'\nACCOUNT_UNIQUE_EMAIL = True\nfrom django.contrib.messages import constants as messages\nMESSAGE_TAGS = {\n    messages.DEBUG: \"info\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USERNAME_REQUIRED",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ACCOUNT_USERNAME_REQUIRED = True  # False\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # False\n# ACCOUNT_PASSWORD_MIN_LENGTH = 6 Deprecated\nACCOUNT_SESSION_REMEMBER = True\nACCOUNT_AUTHENTICATION_METHOD = \"username\"  # 'email'\nACCOUNT_UNIQUE_EMAIL = True\nfrom django.contrib.messages import constants as messages\nMESSAGE_TAGS = {\n    messages.DEBUG: \"info\",\n    messages.INFO: \"primary\",  # \"alert-default-info\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # False\n# ACCOUNT_PASSWORD_MIN_LENGTH = 6 Deprecated\nACCOUNT_SESSION_REMEMBER = True\nACCOUNT_AUTHENTICATION_METHOD = \"username\"  # 'email'\nACCOUNT_UNIQUE_EMAIL = True\nfrom django.contrib.messages import constants as messages\nMESSAGE_TAGS = {\n    messages.DEBUG: \"info\",\n    messages.INFO: \"primary\",  # \"alert-default-info\",\n    messages.SUCCESS: \"success\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_SESSION_REMEMBER",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ACCOUNT_SESSION_REMEMBER = True\nACCOUNT_AUTHENTICATION_METHOD = \"username\"  # 'email'\nACCOUNT_UNIQUE_EMAIL = True\nfrom django.contrib.messages import constants as messages\nMESSAGE_TAGS = {\n    messages.DEBUG: \"info\",\n    messages.INFO: \"primary\",  # \"alert-default-info\",\n    messages.SUCCESS: \"success\",\n    messages.WARNING: \"warning\",\n    messages.ERROR: \"danger\",  # \"alert-default-danger\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = \"username\"  # 'email'\nACCOUNT_UNIQUE_EMAIL = True\nfrom django.contrib.messages import constants as messages\nMESSAGE_TAGS = {\n    messages.DEBUG: \"info\",\n    messages.INFO: \"primary\",  # \"alert-default-info\",\n    messages.SUCCESS: \"success\",\n    messages.WARNING: \"warning\",\n    messages.ERROR: \"danger\",  # \"alert-default-danger\",\n}",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_UNIQUE_EMAIL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ACCOUNT_UNIQUE_EMAIL = True\nfrom django.contrib.messages import constants as messages\nMESSAGE_TAGS = {\n    messages.DEBUG: \"info\",\n    messages.INFO: \"primary\",  # \"alert-default-info\",\n    messages.SUCCESS: \"success\",\n    messages.WARNING: \"warning\",\n    messages.ERROR: \"danger\",  # \"alert-default-danger\",\n}",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MESSAGE_TAGS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MESSAGE_TAGS = {\n    messages.DEBUG: \"info\",\n    messages.INFO: \"primary\",  # \"alert-default-info\",\n    messages.SUCCESS: \"success\",\n    messages.WARNING: \"warning\",\n    messages.ERROR: \"danger\",  # \"alert-default-danger\",\n}",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "OverwriteStorage",
        "kind": 6,
        "importPath": "config.storage",
        "description": "config.storage",
        "peekOfCode": "class OverwriteStorage(FileSystemStorage):\n    def get_available_name(self, name, max_length=None):\n        \"\"\"Returns a filename that's free on the target storage system, and\n        available for new content to be written to.\n        Found at http://djangosnippets.org/snippets/976/\n        This file storage solves overwrite on upload problem. Another\n        proposed solution was to override the save method on the model\n        like so (from https://code.djangoproject.com/ticket/11663):\n        def save(self, *args, **kwargs):\n            try:",
        "detail": "config.storage",
        "documentation": {}
    },
    {
        "label": "THEME_VARIABLES",
        "kind": 5,
        "importPath": "config.template",
        "description": "config.template",
        "peekOfCode": "THEME_VARIABLES = {\n    \"creator_name\": \"Amr Amer\",  # \"ThemeSelection\",\n    \"creator_url\": \"#\",  # \"https://themeselection.com/\",\n    \"template_name\": \"KMA-Clinic\",  # \"Materio\",\n    \"template_suffix\": \"Django Admin Template\",\n    \"template_version\": \"1.0.0\",\n    \"template_free\": True,\n    \"template_description\": \"Materio is a modern, clean and fully responsive admin template built with Bootstrap 5, Django 5, HTML, CSS, and JavaScript. It has a huge collection of reusable UI components. It can be used for all types of web applications like System Error pages, Authentication pages, admin dashboard.\",\n    \"template_keyword\": \"django, django admin, dashboard, bootstrap 5 dashboard, bootstrap 5 design, bootstrap 5\",\n    \"facebook_url\": \"https://www.facebook.com/ThemeSelections/\",",
        "detail": "config.template",
        "documentation": {}
    },
    {
        "label": "THEME_LAYOUT_DIR",
        "kind": 5,
        "importPath": "config.template",
        "description": "config.template",
        "peekOfCode": "THEME_LAYOUT_DIR = \"layout\"",
        "detail": "config.template",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    # Dashboard urls\n    path(\"\", include(\"apps.dashboards.urls\")),\n    # layouts urls\n    path(\"\", include(\"apps.layouts.urls\")),\n    # Pages urls\n    path(\"\", include(\"apps.pages.urls\")),\n    # Auth urls\n    path(\"\", include(\"apps.authentication.urls\")),",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "handler404 = SystemView.as_view(template_name=\"pages_misc_error.html\", status=404)\nhandler400 = SystemView.as_view(template_name=\"pages_misc_error.html\", status=400)\nhandler500 = SystemView.as_view(template_name=\"pages_misc_error.html\", status=500)",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "handler400",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "handler400 = SystemView.as_view(template_name=\"pages_misc_error.html\", status=400)\nhandler500 = SystemView.as_view(template_name=\"pages_misc_error.html\", status=500)",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "handler500 = SystemView.as_view(template_name=\"pages_misc_error.html\", status=500)",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "get_last_month_data",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def get_last_month_data(today):\n    ''' \n        Simple method to get the datetime objects for the \n        start and end of last month. \n    '''\n    this_month_start = datetime.datetime(today.year, today.month, 1)\n    last_month_end = this_month_start - datetime.timedelta(days=1)\n    last_month_start = datetime.datetime(last_month_end.year, last_month_end.month, 1)\n    return (last_month_start, last_month_end)\ndef get_month_data_range(months_ago=1, include_this_month=False):",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "get_month_data_range",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def get_month_data_range(months_ago=1, include_this_month=False):\n    '''\n        A method that generates a list of dictionaries \n        that describe any given amount of monthly data.\n    '''\n    today = datetime.datetime.now().today()\n    dates_ = []\n    if include_this_month:\n        # get next month's data with:\n        next_month = today.replace(day=28) + datetime.timedelta(days=4)",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "get_filename",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def get_filename(path): #/abc/filename.mp4\n    return os.path.basename(path)\ndef random_string_generator(size=10, chars=string.ascii_lowercase + string.digits):\n    return ''.join(random.choice(chars) for _ in range(size))\ndef unique_key_generator(instance):\n    \"\"\"\n    This is for a Django project with an key field\n    \"\"\"\n    size = random.randint(30, 45)\n    key = random_string_generator(size=size)",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "random_string_generator",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def random_string_generator(size=10, chars=string.ascii_lowercase + string.digits):\n    return ''.join(random.choice(chars) for _ in range(size))\ndef unique_key_generator(instance):\n    \"\"\"\n    This is for a Django project with an key field\n    \"\"\"\n    size = random.randint(30, 45)\n    key = random_string_generator(size=size)\n    Klass = instance.__class__\n    qs_exists = Klass.objects.filter(key=key).exists()",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "unique_key_generator",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def unique_key_generator(instance):\n    \"\"\"\n    This is for a Django project with an key field\n    \"\"\"\n    size = random.randint(30, 45)\n    key = random_string_generator(size=size)\n    Klass = instance.__class__\n    qs_exists = Klass.objects.filter(key=key).exists()\n    if qs_exists:\n        return unique_slug_generator(instance)",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "unique_order_id_generator",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def unique_order_id_generator(instance):\n    \"\"\"\n    This is for a Django project with an order_id field\n    \"\"\"\n    order_new_id = random_string_generator()\n    Klass = instance.__class__\n    qs_exists = Klass.objects.filter(order_id=order_new_id).exists()\n    if qs_exists:\n        return unique_slug_generator(instance)\n    return order_new_id",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "unique_slug_generator",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def unique_slug_generator(instance, new_slug=None):\n    \"\"\"\n    This is for a Django project and it assumes your instance \n    has a model with a slug field and a title character (char) field.\n    \"\"\"\n    if new_slug is not None:\n        slug = new_slug\n    else:\n        slug = slugify(instance.title)\n    Klass = instance.__class__",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "model_field_exists",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def model_field_exists(cls, field):\n    try:\n        cls._meta.get_field(field)\n        return True\n    except exceptions.FieldDoesNotExist:\n        return False\nmodels.Model.field_exists = model_field_exists\ndef pass_query(\n    request, *args, \n    template_path, context, ",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "pass_query",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def pass_query(\n    request, *args, \n    template_path, context, \n    app_name, model_name, \n    param=None,\n    exclude=None, \n    **kwargs\n):\n    cls = apps.get_model(app_name, model_name)\n    qs=[]",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "adding",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def adding(\n    request, \n    form_class, app_name, model_name, \n    url=None, template_path=\"\", related_field=None,\n    user=None, field_1=None, \n    field_2=None, field_3=None, \n    context={}\n):\n    if request.method == 'POST':\n        form = form_class(",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "editing",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def editing(\n    request,\n    id_field, \n    form_class, app_name, model_name, \n    url=None, template_path=None, related_field=None, \n    user=None, field_1=None, field_2=None, field_3=None,\n    context={}\n):\n    cls = apps.get_model(app_name, model_name)\n    qs = cls.objects.select_related(related_field).get(id=id_field)",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "switch_active",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def switch_active(request, *args, id, app_name, model_name, **kwargs):\n    from django.http import JsonResponse\n    url = request.META.get(\"HTTP_REFERER\", \"\")\n    next_url = redirect(url)\n    data = {}\n    cls = apps.get_model(app_name, model_name)\n    if cls.field_exists(\"is_active\"):\n        qs = cls.objects.only()\n        check = qs.filter(id=id).exists()\n        if check:",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "switch_offer",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def switch_offer(request, id, app_name, model):\n    cls = apps.get_model(app_name, model)\n    qs = cls.objects.values(\n        'offer',\n    ).get(id=id)\n    url = request.META.get('HTTP_REFERER', '')\n    next_url = redirect(url)\n    if qs:\n        if qs['offer']:\n            cls.objects.values(",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "switch_delete",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def switch_delete(request, id, app_name, model):\n    cls = apps.get_model(app_name, model)\n    qs = cls.objects.values(\n        'is_deleted',\n    ).get(id=id)\n    url = request.META.get('HTTP_REFERER', '')\n    next_url = redirect(url)\n    if qs['is_deleted']:\n        cls.objects.values(\n            'is_deleted',",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "auth_required",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def auth_required(function):\n    def wrap(request, *args, **kwargs):\n        # joins elements of getnode() after each 2 digits. \n        # using regex expression \n        label = os.environ.get('SERIAL')\n        # print (label) \n        mac = ':'.join(re.findall('..', '%012x' % uuid.getnode()))\n        # print (mac) \n        if mac == label:\n            # messages.success(request, 'you are authorized')",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "auth_user_required",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def auth_user_required(function):\n    def wrap(request, *args, **kwargs):\n        user = request.user \n        if user.is_staff:\n            # messages.success(request, 'you are authorized')\n            return function(request, *args, **kwargs)\n        else:\n            # messages.success(request, 'you are not authorized')\n            raise PermissionDenied\n    wrap.__doc__ = function.__doc__",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "prevent_changing_id",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def prevent_changing_id(function):\n    def wrap(request, *args, **kwargs):\n        from apps.users.views import edit_user_profile\n        from apps.users.models import UserProfile\n        # if request.LANGUAGE_CODE == 'en-us':\n        #     lang = 'en' \n        # else:\n        #     lang = (request.LANGUAGE_CODE)\n        # print(lang)\n        user = request.user ",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "admin_only",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def admin_only(function):\n    def wrap(request, *args, **kwargs):\n        # user = request.user\n        if request.user.is_authenticated:\n            if request.user.role == 'client':\n                logout(request)\n                return redirect('error_page')\n            elif request.user.role == 'employee':\n                return redirect('error_page')\n            elif request.user.role == 'admin' or request.user.role == 'owner':",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "model_id_restriction",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def model_id_restriction(app_name, model_name):\n    def wrap(function):\n        def wrapped(request, *args, **kwargs):\n            if request.user.is_authenticated:\n                print('KWARGS-FROM-DECORATOR***', kwargs, app_name, model_name)\n                check = False\n                # check_pro_id = 'product_id'\n                if model_name == 'Product':\n                    kwargs_var = kwargs['product_id']\n                    cls = apps.get_model(app_name, model_name)",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "user_owner_only",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def user_owner_only(function):\n    def wrap(request, *args, **kwargs):\n        if request.user.role == 'supplier':\n            if kwargs['user_id'] != None:\n                if kwargs['user_id'] == request.user.id:\n                    return function(request, *args, **kwargs)\n                else:\n                    return redirect('/dashboard/for/supplier/')\n            else:        \n                return redirect('/dashboard/for/supplier/')",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "test_function_works",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def test_function_works(*args, **kwargs):\n    if args[0] == True:\n        return True\n    return False\ndef some_decorator(*decorator_args , **decorator_kwargs):\n    def decorator(view_function):\n        @wraps(view_function)\n        def _wrapped_view(request, *args, **kwargs):\n            print(\"The required actions will be taken here ! Well, \\\n            actually inside the _wrapped_view function\")",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "some_decorator",
        "kind": 2,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "def some_decorator(*decorator_args , **decorator_kwargs):\n    def decorator(view_function):\n        @wraps(view_function)\n        def _wrapped_view(request, *args, **kwargs):\n            print(\"The required actions will be taken here ! Well, \\\n            actually inside the _wrapped_view function\")\n            if not test_function_works():\n                print(\"The necessary operation that will be taken if \\\n                        the test case fails !\")\n            return view_function(request, *args, **kwargs)",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "models.Model.field_exists",
        "kind": 5,
        "importPath": "config.utils",
        "description": "config.utils",
        "peekOfCode": "models.Model.field_exists = model_field_exists\ndef pass_query(\n    request, *args, \n    template_path, context, \n    app_name, model_name, \n    param=None,\n    exclude=None, \n    **kwargs\n):\n    cls = apps.get_model(app_name, model_name)",
        "detail": "config.utils",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "TemplateBootstrapLayoutBlank",
        "kind": 6,
        "importPath": "templates.layout.bootstrap.layout_blank",
        "description": "templates.layout.bootstrap.layout_blank",
        "peekOfCode": "class TemplateBootstrapLayoutBlank:\n    def init(context):\n        context.update(\n            {\n                \"layout\": \"blank\",\n                \"content_layout\": \"wide\",\n                \"display_customizer\": False,\n            }\n        )\n        # map_context according to updated context values",
        "detail": "templates.layout.bootstrap.layout_blank",
        "documentation": {}
    },
    {
        "label": "TemplateBootstrapLayoutVertical",
        "kind": 6,
        "importPath": "templates.layout.bootstrap.layout_vertical",
        "description": "templates.layout.bootstrap.layout_vertical",
        "peekOfCode": "class TemplateBootstrapLayoutVertical:\n    def init(context):\n        context.update(\n            {\n                \"layout\": \"vertical\",\n                \"content_navbar\": True,\n                \"content_layout\": \"compact\",\n                \"is_navbar\": True,\n                \"is_menu\": True,\n                \"is_footer\": True,",
        "detail": "templates.layout.bootstrap.layout_vertical",
        "documentation": {}
    },
    {
        "label": "TemplateBootstrapSystem",
        "kind": 6,
        "importPath": "templates.layout.bootstrap.system",
        "description": "templates.layout.bootstrap.system",
        "peekOfCode": "class TemplateBootstrapSystem:\n    def init(context):\n        context.update(\n            {\n                \"layout\": \"blank\",\n                \"content_layout\": \"wide\",\n                \"display_customizer\": False,\n            }\n        )\n        # map_context according to updated context values",
        "detail": "templates.layout.bootstrap.system",
        "documentation": {}
    },
    {
        "label": "TemplateHelper",
        "kind": 6,
        "importPath": "web_project.template_helpers.theme",
        "description": "web_project.template_helpers.theme",
        "peekOfCode": "class TemplateHelper:\n    # ? Map context variables to template class/value/variables names\n    def map_context(context):\n        # * Menu Fixed (vertical support only)\n        if context.get(\"layout\") == \"vertical\":\n            if context.get(\"menu_fixed\") is True:\n                context[\"menu_fixed_class\"] = \"layout-menu-fixed\"\n            else:\n                context[\"menu_fixed_class\"] = \"\"\n        # * Content Layout",
        "detail": "web_project.template_helpers.theme",
        "documentation": {}
    },
    {
        "label": "get_theme_variables",
        "kind": 2,
        "importPath": "web_project.template_tags.theme",
        "description": "web_project.template_tags.theme",
        "peekOfCode": "def get_theme_variables(scope, *args, **kwargs):\n    return mark_safe(TemplateHelper.get_theme_variables(scope, *args, **kwargs))\n# @register.simple_tag\n# def get_theme_variables(key, *args, **kwargs):\n#     theme_variables = settings.THEME_VARIABLES\n#     url = theme_variables.get(key, '')\n#     if args or kwargs:\n#         try:\n#             url = url.format(*args, **kwargs)\n#         except KeyError as e:",
        "detail": "web_project.template_tags.theme",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "web_project.template_tags.theme",
        "description": "web_project.template_tags.theme",
        "peekOfCode": "register = template.Library()\n# Register tags as an adapter for the Theme class usage in the HTML template\n# @register.simple_tag\n# def get_theme_variables(scope):\n#     return mark_safe(TemplateHelper.get_theme_variables(scope))\n# * FROM CHATGPT\n@register.simple_tag\ndef get_theme_variables(scope, *args, **kwargs):\n    return mark_safe(TemplateHelper.get_theme_variables(scope, *args, **kwargs))\n# @register.simple_tag",
        "detail": "web_project.template_tags.theme",
        "documentation": {}
    },
    {
        "label": "SystemView",
        "kind": 6,
        "importPath": "web_project.views",
        "description": "web_project.views",
        "peekOfCode": "class SystemView(TemplateView):\n    template_name = \"pages/system/not-found.html\"\n    status = \"\"\n    def get_context_data(self, **kwargs):\n        # A function to init the global layout. It is defined in web_project/__init__.py file\n        context = TemplateLayout.init(self, super().get_context_data(**kwargs))\n        # Define the layout for this module\n        # _templates/layout/system.html\n        context.update(\n            {",
        "detail": "web_project.views",
        "documentation": {}
    },
    {
        "label": "bind",
        "kind": 5,
        "importPath": "gunicorn-cfg",
        "description": "gunicorn-cfg",
        "peekOfCode": "bind = '0.0.0.0:5005'\nworkers = 1\naccesslog = '-'\nloglevel = 'debug'\ncapture_output = True\nenable_stdio_inheritance = True",
        "detail": "gunicorn-cfg",
        "documentation": {}
    },
    {
        "label": "workers",
        "kind": 5,
        "importPath": "gunicorn-cfg",
        "description": "gunicorn-cfg",
        "peekOfCode": "workers = 1\naccesslog = '-'\nloglevel = 'debug'\ncapture_output = True\nenable_stdio_inheritance = True",
        "detail": "gunicorn-cfg",
        "documentation": {}
    },
    {
        "label": "accesslog",
        "kind": 5,
        "importPath": "gunicorn-cfg",
        "description": "gunicorn-cfg",
        "peekOfCode": "accesslog = '-'\nloglevel = 'debug'\ncapture_output = True\nenable_stdio_inheritance = True",
        "detail": "gunicorn-cfg",
        "documentation": {}
    },
    {
        "label": "loglevel",
        "kind": 5,
        "importPath": "gunicorn-cfg",
        "description": "gunicorn-cfg",
        "peekOfCode": "loglevel = 'debug'\ncapture_output = True\nenable_stdio_inheritance = True",
        "detail": "gunicorn-cfg",
        "documentation": {}
    },
    {
        "label": "capture_output",
        "kind": 5,
        "importPath": "gunicorn-cfg",
        "description": "gunicorn-cfg",
        "peekOfCode": "capture_output = True\nenable_stdio_inheritance = True",
        "detail": "gunicorn-cfg",
        "documentation": {}
    },
    {
        "label": "enable_stdio_inheritance",
        "kind": 5,
        "importPath": "gunicorn-cfg",
        "description": "gunicorn-cfg",
        "peekOfCode": "enable_stdio_inheritance = True",
        "detail": "gunicorn-cfg",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]