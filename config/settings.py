"""
Django settings for web_project project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import random
import string
from pathlib import Path

from dotenv import load_dotenv

from .template import THEME_LAYOUT_DIR, THEME_VARIABLES

load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

print("BASE+DIR -- >>", BASE_DIR)
# Update secret key in .env file and .env.prod file
# SECRET_KEY = os.environ.get("SECRET_KEY", default='')

# SECURITY WARNING: keep the secret key used in production secret!
# If using the .env file for SECRET_KEY then comment below random SECRET_KEY generation code.
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    SECRET_KEY = "".join(random.choice(string.ascii_lowercase) for i in range(32))


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "True").lower() in ["true", "yes", "1"]


# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
ALLOWED_HOSTS = ["localhost", "0.0.0.0", "127.0.0.1", "192.168.1.199"]

# Current DJANGO_ENVIRONMENT
ENVIRONMENT = os.environ.get("DJANGO_ENVIRONMENT", default="local")

print(
    "DEBUG>>>",
    DEBUG,
    "SECRET_KEY>>>",
    SECRET_KEY,
    "ENVIRONMENT>>>>>",
    ENVIRONMENT,
)
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # ? for allauth
    "django.contrib.sites",  # Required for django-allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # ? third party
    "widget_tweaks",
    "qr_code",
    # ? materio apps
    "apps.dashboards",
    "apps.layouts",
    "apps.pages",
    "apps.authentication",
    "apps.cards",
    "apps.ui",
    "apps.extended_ui",
    "apps.icons",
    "apps.forms",
    "apps.form_layouts",
    "apps.tables",
    # ? my apps
    "apps.configurations",
    "apps.home",
    "apps.management",
    "apps.patientdata",
    "apps.pasthistory",
    "apps.presenthistory",
    "apps.revisits",
    "apps.users",
    "apps.visitdrug",
    "apps.visits",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # * Add the account middleware for new allauth version:
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "config.context_processors.my_setting",
                "config.context_processors.environment",
            ],
            "libraries": {
                "theme": "web_project.template_tags.theme",
            },
            "builtins": [
                "django.templatetags.static",
                "web_project.template_tags.theme",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"


STATICFILES_DIRS = [
    BASE_DIR / "src" / "assets",
]


MEDIA_URL = "/media/"
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# MEDIA_ROOT = (BASE_DIR / "media_root")
MEDIA_ROOT = BASE_DIR / "media/"

# Default URL on which Django application runs for specific environment
BASE_URL = os.environ.get("BASE_URL", default="http://127.0.0.1:8000")


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Template Settings
# ------------------------------------------------------------------------------

THEME_LAYOUT_DIR = THEME_LAYOUT_DIR
THEME_VARIABLES = THEME_VARIABLES


# Your stuff...
# ------------------------------------------------------------------------------

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

# for django-allauth manage users login,signup and logout
AUTH_USER_MODEL = "users.CustomUser"

LOGIN_REDIRECT_URL = "/"  # means
ACCOUNT_LOGOUT_REDIRECT_URL = "/"

# * If True it will logout the user immediately
ACCOUNT_LOGOUT_ON_GET = True

SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = False  # True
ACCOUNT_USERNAME_REQUIRED = True  # False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # False
# ACCOUNT_PASSWORD_MIN_LENGTH = 6 Deprecated

ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_AUTHENTICATION_METHOD = "username"  # 'email'
ACCOUNT_UNIQUE_EMAIL = True

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: "info",
    messages.INFO: "primary",  # "alert-default-info",
    messages.SUCCESS: "success",
    messages.WARNING: "warning",
    messages.ERROR: "danger",  # "alert-default-danger",
}


##
import os

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "debug.log"),
            "formatter": "verbose",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": True,
        },
        "myapp": {  # Replace with your app name
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

###
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "main_formatter": {
            "format": "%(levelname)s: %(asctime)s %(pathname)s:%(lineno)d : %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        }
    },
    "handlers": {
        # "log_file": {
        #     "level": "DEBUG" if DEBUG else "INFO",
        #     "class": "logging.handlers.RotatingFileHandler",
        #     "filename": os.path.join(BASE_DIR / "/logs/main_debug.log"),
        #     "maxBytes": 1024 * 1024 * 20,  # 5 MB
        #     "backupCount": 7,
        #     "formatter": "main_formatter",
        # },
        # "users_email_and_update_log_file": {
        #     "level": "DEBUG" if DEBUG else "INFO",
        #     "class": "logging.handlers.RotatingFileHandler",
        #     "filename": os.path.join(BASE_DIR / "/logs/users_email_and_update.log"),
        #     "maxBytes": 1024 * 1024 * 20,  # 5 MB
        #     "backupCount": 7,
        #     "formatter": "main_formatter",
        # },
        # "delete_users_log_file": {
        #     "level": "DEBUG" if DEBUG else "INFO",
        #     "class": "logging.handlers.RotatingFileHandler",
        #     "filename": os.path.join(BASE_DIR / "/logs/delete_users.log"),
        #     "maxBytes": 1024 * 1024 * 20,  # 5 MB
        #     "backupCount": 7,
        #     "formatter": "main_formatter",
        # },
    },
    "loggers": {
        # "main": {
        #     "handlers": ["log_file"],
        #     "level": "DEBUG" if DEBUG else "INFO",
        #     "propagate": True,
        # },
        # "purchase": {
        #     "handlers": ["log_file"],
        #     "level": "DEBUG" if DEBUG else "INFO",
        #     "propagate": True,
        # },
        # "services": {
        #     "handlers": ["log_file"],
        #     "level": "INFO",
        #     "propagate": True,
        # },
        # "django.request": {
        #     "handlers": ["log_file"],
        #     "level": "INFO",
        #     "propagate": True,
        # },
        # "email_and_update_service": {
        #     "handlers": ["users_email_and_update_log_file"],
        #     "level": "INFO",
        #     "propagate": True,
        # },
        # "delete_users_service": {
        #     "handlers": ["delete_users_log_file"],
        #     "level": "INFO",
        #     "propagate": True,
        # },
    },
}
